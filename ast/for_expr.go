package ast

import "foo_lang/scope"


type ForExpr struct {
	InitExpr      Expr
	ConditionExpr Expr
	StepExpr      Expr
	BodyExpr      Expr
}

func NewForExpr(init, condition, step, body Expr) *ForExpr {
	return &ForExpr{
		InitExpr:      init,
		ConditionExpr: condition,
		StepExpr:      step,
		BodyExpr:      body,
	}
}

func (f *ForExpr) Eval() *Value {
	// –°–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ü–∏–∫–ª–∞
	scope.GlobalScope.Push()
	defer scope.GlobalScope.Pop()

	statments := f.BodyExpr.(*BodyExpr).Statments
	var yield []any

	f.InitExpr.Eval()
	for {
		if !f.ConditionExpr.Eval().Bool() {
			break
		}
		
		// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
		// –≠—Ç–æ –∏–∑–æ–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ —Å let –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞
		scope.GlobalScope.Push()
		
		iterationBreak := false
		for _, statment := range statments {
			switch stm := statment.(type) {
			case *ReturnExpr:
				val := stm.Eval()
				val.SetReturn(true)
				scope.GlobalScope.Pop() // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ return
				return val
			case *BreakExpr:
				// Break out of the loop immediately
				iterationBreak = true
				break
			case *YieldExpr:
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª break, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º yield
				if !iterationBreak {
					yield = append(yield, stm.Eval().Any())
				}
			default:
				val := stm.Eval()
				if val != nil {
					if val.IsReturn() {
						scope.GlobalScope.Pop() // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ return
						return val
					}
					if val.IsBreak() {
						iterationBreak = true
						break
					}
					if val.IsYield() {
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª break, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º yield
						if !iterationBreak {
							yield = append(yield, val.Any())
						}
					}
				}
			}
			
			// –ï—Å–ª–∏ –±—ã–ª break, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö statement –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
			if iterationBreak {
				break
			}
		}
		
		// –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
		scope.GlobalScope.Pop()
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞
		if iterationBreak {
			break
		}
		
		f.StepExpr.Eval()
	}

	return NewValue(yield)
}
