// üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û LSP –° EXTENSION METHODS
// –§–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è context-aware –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞

// ===== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï EXTENSION –ú–ï–¢–û–î–û–í =====

extension string {
    fn reverse() -> string {
        // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
        return "gnirts"
    }
    
    fn wordCount() -> int {
        // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        return 3
    }
    
    fn isEmail() -> bool {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Ñ–æ—Ä–º–∞—Ç–∞
        return regexMatch("@", this)
    }
    
    fn capitalize() -> string {
        // –ó–∞–≥–ª–∞–≤–Ω–∞—è –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
        return "Capitalized"  
    }
}

extension int {
    fn factorial() -> int {
        // –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞
        if (this <= 1) { return 1 }
        return this * (this - 1).factorial()
    }
    
    fn isPrime() -> bool {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
        if (this < 2) { return false }
        return true  // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    }
    
    fn doubled() -> int {
        return this * 2
    }
    
    fn power(exp: int) -> int {
        // –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
        return 100  // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    }
}

extension float {
    fn rounded() -> int {
        return 42  // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    }
    
    fn percentage() -> string {
        return this.toString() + "%"
    }
}

// ===== –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====

let email: string = "user@example.com"
let count: int = 42
let price: float = 29.99

// ===== –ú–ï–°–¢–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–ö–û–ú–ü–õ–ò–¢–ê =====

// üéØ –¢–ï–°–¢ 1: Extension –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç—Ä–æ–∫
// –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+Space
// –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è: reverse, wordCount, isEmail, capitalize + –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// email.

// üéØ –¢–ï–°–¢ 2: Extension –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∏—Å–µ–ª  
// –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è: factorial, isPrime, doubled, power + –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// count.

// üéØ –¢–ï–°–¢ 3: Extension –º–µ—Ç–æ–¥—ã –¥–ª—è float
// –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è: rounded, percentage + –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã  
// price.

// ===== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í =====

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–∑–æ–≤–æ–≤ extension –º–µ—Ç–æ–¥–æ–≤
let reversedEmail = email.reverse()
let emailValid = email.isEmail()
let emailLength = email.length()  // –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥

let factorialResult = count.factorial()
let isPrimeResult = count.isPrime()
let countString = count.toString()  // –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥

let roundedPrice = price.rounded()
let pricePercent = price.percentage()

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
println("Email: " + email)
println("Reversed: " + reversedEmail)
println("Valid email: " + emailValid.toString())
println("Length: " + emailLength.toString())

println("Count: " + count.toString())
println("Factorial: " + factorialResult.toString())
println("Is prime: " + isPrimeResult.toString())

println("Price: " + price.toString())
println("Rounded: " + roundedPrice.toString())
println("Percentage: " + pricePercent)

// ===== –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====

/*
üìã –ö–ê–ö –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –í VS CODE:

1. –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ VS Code —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Foo Language —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LSP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏)
3. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –≤ –º–µ—Å—Ç–∞—Ö –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö "–¢–ï–°–¢"
4. –ù–∞–∂–º–∏—Ç–µ Ctrl+Space –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ extension –º–µ—Ç–æ–¥—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ

‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
- Extension –º–µ—Ç–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–∞–∫–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
- Hover –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ

üîß –ï–°–õ–ò –ù–ï –†–ê–ë–û–¢–ê–ï–¢:
- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VSCode
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ .vsix —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LSP —Å–µ—Ä–≤–µ—Ä —Å–æ–±—Ä–∞–Ω (go build –≤ –ø–∞–ø–∫–µ lsp/)
- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ Output -> Foo Language Client
*/