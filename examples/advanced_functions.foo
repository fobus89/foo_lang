// Демонстрация расширенных возможностей функций

println("=== Параметры по умолчанию ===")

// Функция с параметрами по умолчанию
fn greet(name, greeting = "Привет", punctuation = "!") {
    return greeting + ", " + name + punctuation
}

// Использование параметров по умолчанию
println(greet("Мир"))                    // "Привет, Мир!"
println(greet("Анна", "Здравствуй"))     // "Здравствуй, Анна!"  
println(greet("Петр", "Добро пожаловать", "!!!"))  // "Добро пожаловать, Петр!!!"

// Функция с вычисляемыми параметрами по умолчанию
let defaultMultiplier = 2

fn multiply(x, factor = defaultMultiplier * 3) {
    return x * factor
}

println("multiply(5) = " + multiply(5))          // 5 * 6 = 30
println("multiply(5, 4) = " + multiply(5, 4))    // 5 * 4 = 20

println("\n=== Множественные возвращаемые значения ===")

// Функция возвращающая частное и остаток
fn divmod(a, b) {
    return a / b, a % b
}

// Функция возвращающая имя и возраст
fn getPersonInfo() {
    return "Иван Петров", 35
}

// Функция возвращающая координаты
fn getCoordinates(angle) {
    return angle * 2, angle + 10  // Упрощенные координаты
}

// Использование множественного присваивания
let quotient, remainder = divmod(23, 7)
println("23 ÷ 7 = " + quotient + " остаток " + remainder)

let name, age = getPersonInfo()
println("Имя: " + name + ", Возраст: " + age)

let x, y = getCoordinates(45)
println("Координаты: (" + x + ", " + y + ")")

// Присваивание одного значения множественным переменным
fn singleValue() {
    return 100
}

let a, b, c = singleValue()
println("a = " + a + ", b = " + b + ", c = " + c)  // a = 100, b = <nil>, c = <nil>

println("\n=== Комбинирование функций ===")

// Функция с параметрами по умолчанию, возвращающая несколько значений
fn calculateStats(numbers, multiplier = 1) {
    let sum = 0
    let count = numbers.length()
    
    for let i = 0; i < count; i++ {
        sum = sum + numbers[i] * multiplier
    }
    
    let average = sum / count
    return sum, average, count
}

let data = [10, 20, 30, 40, 50]
let total, avg, size = calculateStats(data)
println("Массив " + data + ":")
println("Сумма: " + total + ", Среднее: " + avg + ", Размер: " + size)

let scaledTotal, scaledAvg, scaledSize = calculateStats(data, 2)
println("С множителем 2:")
println("Сумма: " + scaledTotal + ", Среднее: " + scaledAvg + ", Размер: " + scaledSize)