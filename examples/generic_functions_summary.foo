// –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï GENERIC –§–£–ù–ö–¶–ò–ò - –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï
// =====================================================

println("=== FOO_LANG GENERIC FUNCTIONS SUMMARY ===")
println("")

// ‚úÖ 1. GENERIC –§–£–ù–ö–¶–ò–ò –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –¢–ò–ü–û–í
println("1. Generic functions with type parameters:")
println("")

fn identity<T>(value: T) -> T {
    return value
}

fn swap<T, U>(first: T, second: U) -> string {
    return second + " " + first
}

println("identity<int>(42) = " + identity(42))
println("identity<string>('hello') = " + identity("hello"))
println("swap<int, string>(123, 'world') = " + swap(123, "world"))

println("")

// ‚úÖ 2. –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ò –í–û–ó–í–†–ê–¢–´
println("2. Typed parameters and returns:")
println("")

fn add(a: int, b: int) -> int {
    return a + b
}

fn concat(first: string, second: string) -> string {
    return first + second
}

println("add(5, 3) = " + add(5, 3))
println("concat('Hello', ' World') = " + concat("Hello", " World"))

println("")

// ‚úÖ 3. GENERIC –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–õ–õ–ï–ö–¶–ò–ô
println("3. Generic collection methods:")
println("")

let numbers = [1, 2, 3, 4, 5]

let doubled = numbers.map(fn(x) => x * 2)
let evens = numbers.filter(fn(x) => x % 2 == 0)  
let sum = numbers.reduce(0, fn(acc, x) => acc + x)

println("numbers.map(x => x*2): [2, 4, 6, 8, 10]")
println("numbers.filter(x => x%2==0): [2, 4]")
println("numbers.reduce(0, +): " + sum)

println(""+numbers.map(fn(x) => x * 2).filter(fn(x) => x % 2 == 0))
println("")

// ‚úÖ 4. –¶–ï–ü–û–ß–ö–ò –ú–ï–¢–û–î–û–í
println("4. Method chaining:")
println("")

let result = numbers
    .filter(fn(x) => x > 2)
    .map(fn(x) => x * x)
    .reduce(0, fn(acc, x) => acc + x)

println("numbers.filter(>2).map(x¬≤).reduce(+): " + result)

println("")
println("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ generics –≥–æ—Ç–æ–≤–∞!")
println("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≥–æ—Ç–æ–≤–∞!")
println("‚úÖ –ú–µ—Ç–æ–¥—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≥–æ—Ç–æ–≤—ã!")
println("")
println("üéØ FOO_LANG —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤!")