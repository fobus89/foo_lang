// –†–∞–±–æ—á–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

struct User {
    name: string,
    age: int
}

macro demonstrateApproach(structParam: StructType) {
    println("=== Macro-time: Processing " + structParam.Name + " ===")
    
    generate {
        fn create${structParam.Name}(name, age) {
            return ${structParam.Name}{name: name, age: age}
        }
        
        fn print${structParam.Name}Info(obj) {
            println("=== ${structParam.Name} Info ===")
            println("Type: ${structParam.Kind}")
            println("Name: " + obj.name)
            println("Age: " + obj.age.toString())
        }
        
        fn get${structParam.Name}Summary(obj) {
            return obj.name + " is a " + "${structParam.Name}"
        }
    }
}

println("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–î–•–û–î–ê ===")
println("")

@demonstrateApproach(User)

let user = createUser("Alice", 25)
printUserInfo(user)

let summary = getUserSummary(user)
println("Summary: " + summary)

println("")
println("üéØ –ù–û–í–´–ô –ü–û–î–•–û–î –° $ –ü–†–ï–§–ò–ö–°–ê–ú–ò:")
println("")
println("–ö–õ–Æ–ß–ï–í–ê–Ø –ò–î–ï–Ø:")
println("$ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º = compile-time (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –º–∞–∫—Ä–æ—Å–∞)")
println("–ë–µ–∑ $ = runtime (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)")
println("")
println("–ü–†–ò–ú–ï–†–´:")
println("for   = runtime —Ü–∏–∫–ª –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")  
println("$for  = compile-time —Ü–∏–∫–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("if    = runtime —É—Å–ª–æ–≤–∏–µ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
println("$if   = compile-time —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("let   = runtime –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
println("$let  = compile-time –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Ä–æ—Å–∞")
println("")
println("–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
println("‚úÖ –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ compile-time vs runtime")
println("‚úÖ –ú–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
println("‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å $ –±–ª–æ–∫–∞–º–∏!")