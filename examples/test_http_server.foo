// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ foo_lang
print("=== HTTP –°–µ—Ä–≤–µ—Ä –î–µ–º–æ ===")

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
httpCreateServer()
print("HTTP —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fn homeHandler(request) {
    print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: " + request.method + " " + request.path)
    
    let html = "<!DOCTYPE html>
<html>
<head>
    <title>foo_lang HTTP Server</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { color: #333; border-bottom: 2px solid #007acc; }
        .info { background: #f0f8ff; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .endpoint { background: #f9f9f9; padding: 10px; margin: 10px 0; border-left: 4px solid #007acc; }
    </style>
</head>
<body>
    <h1 class='header'>üöÄ foo_lang HTTP Server</h1>
    <div class='info'>
        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
        <p>–≠—Ç–æ HTTP —Å–µ—Ä–≤–µ—Ä, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <strong>foo_lang</strong>!</p>
        <p>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: " + request.headers.Date + "</p>
    </div>
    
    <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
    <div class='endpoint'><strong>GET /</strong> - —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞</div>
    <div class='endpoint'><strong>GET /api/status</strong> - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</div>
    <div class='endpoint'><strong>GET /api/hello</strong> - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</div>
    <div class='endpoint'><strong>POST /api/echo</strong> - —ç—Ö–æ —Å–µ—Ä–≤–∏—Å</div>
    <div class='endpoint'><strong>GET /api/time</strong> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è</div>
</body>
</html>"
    
    return {
        "status": 200,
        "headers": {"Content-Type": "text/html; charset=utf-8"},
        "body": html
    }
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
fn statusHandler(request) {
    print("API –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞")
    
    let status = {
        "server": "foo_lang HTTP Server",
        "version": "2.0",
        "status": "running",
        "features": ["async", "http", "json", "generics"],
        "uptime": "just started",
        "method": request.method,
        "path": request.path
    }
    
    return {
        "status": 200,
        "headers": {"Content-Type": "application/json"},
        "body": jsonStringify(status)
    }
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
fn helloHandler(request) {
    print("API –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä name –∏–∑ query string
    let name = "Guest"
    if (request.query.name) {
        name = request.query.name
    }
    
    let greeting = {
        "message": "Hello " + name + "!",
        "from": "foo_lang HTTP Server",
        "timestamp": "2025-01-12"
    }
    
    return {
        "status": 200,
        "headers": {"Content-Type": "application/json"},
        "body": jsonStringify(greeting)
    }
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ö–æ
fn echoHandler(request) {
    print("API —ç—Ö–æ –∑–∞–ø—Ä–æ—Å: " + request.method)
    
    if (request.method == "POST") {
        let echo = {
            "echo": request.body,
            "method": request.method,
            "headers": request.headers,
            "received_at": "2025-01-12"
        }
        
        return {
            "status": 200,
            "headers": {"Content-Type": "application/json"},
            "body": jsonStringify(echo)
        }
    } else {
        return {
            "status": 405,
            "headers": {"Content-Type": "application/json"},
            "body": "{\\"error\\": \\"Method not allowed. Use POST.\\"}"
        }
    }
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
fn timeHandler(request) {
    print("API –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏")
    
    let timeInfo = {
        "current_time": "2025-01-12T15:30:00Z",
        "timezone": "UTC",
        "format": "ISO 8601",
        "server": "foo_lang"
    }
    
    return {
        "status": 200,
        "headers": {"Content-Type": "application/json"},
        "body": jsonStringify(timeInfo)
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã...")

httpRoute("GET", "/", homeHandler)
httpRoute("GET", "/api/status", statusHandler)
httpRoute("GET", "/api/hello", helloHandler)
httpRoute("POST", "/api/echo", echoHandler)
httpRoute("GET", "/api/time", timeHandler)

print("–ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
print("  GET  / - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
print("  GET  /api/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
print("  GET  /api/hello?name=YourName - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
print("  POST /api/echo - —ç—Ö–æ —Å–µ—Ä–≤–∏—Å")
print("  GET  /api/time - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
print("\n–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000...")
let serverResult = httpStartServer(3000)
print(serverResult)

print("\nüåü –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
print("   http://localhost:3000")
print("\nüì° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
print("   curl http://localhost:3000/api/status")
print("   curl http://localhost:3000/api/hello?name=Test")
print("   curl -X POST -d 'Hello Server!' http://localhost:3000/api/echo")
print("   curl http://localhost:3000/api/time")

print("\n‚è∞ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")

// –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
await sleep(30000)

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
let stopResult = httpStopServer()
print(stopResult)

print("\n=== HTTP –°–µ—Ä–≤–µ—Ä –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")