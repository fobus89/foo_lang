// –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π foo_lang v2
// Comprehensive demo of modern foo_lang v2 features

println("üöÄ === FOO LANG V2 - –°–û–í–†–ï–ú–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò === üöÄ")
println("")

// ========== 1. –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
println("1Ô∏è‚É£ –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")

fn calculateArea(width: int, height: int) {
    return width * height
}

fn formatMessage(name: string, count: int) {
    return "–ü—Ä–∏–≤–µ—Ç " + name + "! –£ –≤–∞—Å " + count + " —Å–æ–æ–±—â–µ–Ω–∏–π."
}

fn checkStatus(isActive: bool, threshold: float) {
    if isActive && threshold > 0.5 {
        return "–ê–ö–¢–ò–í–ï–ù"
    }
    return "–ù–ï–ê–ö–¢–ò–í–ï–ù"
}

println("‚Ä¢ calculateArea(10, 5) = " + calculateArea(10, 5))
println("‚Ä¢ formatMessage = " + formatMessage("–ò–≤–∞–Ω", 42))
println("‚Ä¢ checkStatus = " + checkStatus(true, 0.8))
println("")

// ========== 2. –°–¢–†–£–ö–¢–£–†–´ –ò –ï–ù–£–ú–´ ==========
println("2Ô∏è‚É£ –°–¢–†–£–ö–¢–£–†–´ –ò –ï–ù–£–ú–´:")

struct User {
    name: string,
    age: int,
    email: string
}

struct Product {
    title: string,
    price: float,
    inStock: bool
}

enum OrderStatus {
    PENDING,
    PROCESSING,
    SHIPPED,
    DELIVERED
}

enum Priority {
    LOW,
    MEDIUM,
    HIGH
}

println("‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: User, Product")
println("‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –µ–Ω—É–º—ã: OrderStatus, Priority")
println("")

// ========== 3. –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–ö–†–û–°–´ ==========
println("3Ô∏è‚É£ –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–ö–†–û–°–´ –° –ù–û–í–´–ú –°–ò–ù–¢–ê–ö–°–ò–°–û–ú:")

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞
macro codeGenerator(anyType: Type) {
    println("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —Ç–∏–ø–∞: " + anyType.Name + " (" + anyType.Kind + ")")
    
    if anyType.isStruct() {
        println("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞...")
        println("   fn create" + anyType.Name + "() { return {} }")
        println("   fn validate" + anyType.Name + "(obj) { return obj != null }")
    } else if anyType.isEnum() {
        println("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ–ª–ø–µ—Ä–æ–≤ –¥–ª—è enum...")
        println("   fn is" + anyType.Name + "Valid(value) { return true }")
        println("   fn parse" + anyType.Name + "(str) { return " + anyType.Name + ".PENDING }")
    } else if anyType.isPrimitive() {
        println("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–∞...")
        println("   fn process" + anyType.Name + "(value) { return value }")
    }
    println("")
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–∫—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä
macro structBuilder(structType: StructType) {
    println("üèóÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: " + structType.Name)
    println("   fn build" + structType.Name + "(data) {")
    println("     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")
    println("     return { ...data }")
    println("   }")
    println("")
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–∫—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–Ω—É–º–æ–≤
macro enumValidator(enumType: EnumType) {
    println("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä enum: " + enumType.Name)
    println("   fn validate" + enumType.Name + "(value) {")
    println("     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    println("     return value >= 0 && value < " + enumType.Name + ".length")
    println("   }")
    println("")
}

// ‚ú® –ù–û–í–´–ô –°–ò–ù–¢–ê–ö–°–ò–°: –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤! ‚ú®
println("üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:")
@codeGenerator(User)           // –°—Ç—Ä—É–∫—Ç—É—Ä–∞
@codeGenerator(OrderStatus)    // Enum
@codeGenerator(int)            // –ü—Ä–∏–º–∏—Ç–∏–≤
@codeGenerator(string)         // –ü—Ä–∏–º–∏—Ç–∏–≤

println("üèóÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:")
@structBuilder(User)           // –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
@structBuilder(Product)        // –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

@enumValidator(OrderStatus)    // –¢–æ–ª—å–∫–æ –µ–Ω—É–º—ã
@enumValidator(Priority)       // –¢–æ–ª—å–∫–æ –µ–Ω—É–º—ã

// ========== 4. –ü–û–õ–ò–ú–û–†–§–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ò–ü–û–í ==========
println("4Ô∏è‚É£ –ü–û–õ–ò–ú–û–†–§–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ò–ü–û–í:")

macro universalAnalyzer(someType: Type) {
    println("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞: " + someType.Name)
    println("   Kind: " + someType.Kind)
    println("   isStruct(): " + someType.isStruct())
    println("   isPrimitive(): " + someType.isPrimitive()) 
    println("   isEnum(): " + someType.isEnum())
    println("   isFunction(): " + someType.isFunction())
    println("")
}

println("üìä –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
@universalAnalyzer(User)       // –°—Ç—Ä—É–∫—Ç—É—Ä–∞
@universalAnalyzer(Priority)   // Enum
@universalAnalyzer(bool)       // –ü—Ä–∏–º–∏—Ç–∏–≤

// ========== 5. –ê–ù–û–ù–ò–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ó–ê–ú–´–ö–ê–ù–ò–Ø ==========
println("5Ô∏è‚É£ –ê–ù–û–ù–ò–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ó–ê–ú–´–ö–ê–ù–ò–Ø:")

let multiplier = 3
let multiply = fn(x) => x * multiplier  // –ó–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

let complexCalc = fn(a, b) {
    let temp = a + b
    return temp * temp
}

println("‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: multiply(5) = " + multiply(5))
println("‚Ä¢ –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: complexCalc(3, 4) = " + complexCalc(3, 4))
println("")

// ========== 6. –í–°–¢–†–û–ï–ù–ù–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========
println("6Ô∏è‚É£ –í–°–¢–†–û–ï–ù–ù–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò:")

println("‚Ä¢ sqrt(16) = " + sqrt(16))
println("‚Ä¢ sin(3.14159/2) ‚âà " + sin(3.14159/2))
println("‚Ä¢ pow(2, 8) = " + pow(2, 8))
println("‚Ä¢ max(10, 20) = " + max(10, 20))
println("")

// ========== –ò–¢–û–ì–ò ==========
println("‚ú® === –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò === ‚ú®")
println("‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (int, string, float, bool)")
println("‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã (Type, StructType, EnumType)")
println("‚úÖ –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: @macro(TypeName) –≤–º–µ—Å—Ç–æ @macro(type(TypeName))")
println("‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ —Å –º–µ—Ç–æ–¥–∞–º–∏ isStruct(), isPrimitive()...")
println("‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è")
println("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
println("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ–Ω—É–º—ã –∏ –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤")
println("")
println("üéâ FOO LANG V2 - –°–û–í–†–ï–ú–ï–ù–ù–´–ô –Ø–ó–´–ö –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø! üéâ")