// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Extension Methods –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
// üî• –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ foo_lang: –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

println("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Extension Methods –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ===\n")

// === 1. –ì–õ–û–ë–ê–õ–¨–ù–´–ô IO –û–ë–™–ï–ö–¢ ===
println("1. –ì–ª–æ–±–∞–ª—å–Ω—ã–π IO –æ–±—ä–µ–∫—Ç:")

// –ò—Å–ø–æ–ª—å–∑—É–µ–º IO –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
IO.printf("System info: %s/%s\n", "linux", "x86_64")
IO.writeLn("Hello from IO object!")

// === 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ô SYSTEM –û–ë–™–ï–ö–¢ ===
println("\n2. –ì–ª–æ–±–∞–ª—å–Ω—ã–π System –æ–±—ä–µ–∫—Ç:")

let osInfo = System.getOS()
println("OS info: " + osInfo["os"] + "/" + osInfo["arch"])

let user = System.getEnv("USER")
if user {
    println("Current user: " + user)
} else {
    println("User not found")
}

// === 3. –ì–õ–û–ë–ê–õ–¨–ù–´–ô PROCESS –û–ë–™–ï–ö–¢ ===
println("\n3. –ì–ª–æ–±–∞–ª—å–Ω—ã–π Process –æ–±—ä–µ–∫—Ç:")

let pid = Process.getPid()
println("Process PID: " + pid)

// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Process –æ–±—ä–µ–∫—Ç
let result = Process.exec("echo", "Hello World")
println("Command result:")
println(result)

// === 4. –ì–õ–û–ë–ê–õ–¨–ù–´–ô DEBUG –û–ë–™–ï–ö–¢ ===
println("\n4. –ì–ª–æ–±–∞–ª—å–Ω—ã–π Debug –æ–±—ä–µ–∫—Ç:")

let testValue = 42
println("Value type: " + Debug.typeOf(testValue))
println("Value size: " + Debug.sizeOf(testValue) + " bytes")

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
Debug.debug(testValue)

// === 5. –ì–õ–û–ë–ê–õ–¨–ù–´–ô MEMORY –û–ë–™–ï–ö–¢ ===
println("\n5. –ì–ª–æ–±–∞–ª—å–Ω—ã–π Memory –æ–±—ä–µ–∫—Ç:")

let memoryStats = Memory.stats()
println("Memory allocated: " + (memoryStats["alloc"] / 1024) + " KB")

// === 6. –ì–õ–û–ë–ê–õ–¨–ù–´–ô CLI –û–ë–™–ï–ö–¢ ===
println("\n6. –ì–ª–æ–±–∞–ª—å–Ω—ã–π CLI –æ–±—ä–µ–∫—Ç:")

println("Script name: " + CLI.getScriptName())
println("Arguments count: " + CLI.getArgCount())

let args = CLI.getArgs()
println("Arguments: " + args)

// === 7. CONSOLE –û–ë–™–ï–ö–¢ ===
println("\n7. –ì–ª–æ–±–∞–ª—å–Ω—ã–π Console –æ–±—ä–µ–∫—Ç:")

Console.writeLn("Console output with writeLn")
Console.printf("Formatted console output: %s = %d\n", "answer", 42)

// === 8. –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ò–õ–ï–ô –í–´–ó–û–í–ê ===
println("\n=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤—ã–∑–æ–≤–∞ ===")

// –°—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å - –ø—Ä—è–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
println("\n–°—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å (—Ñ—É–Ω–∫—Ü–∏–∏):")
printf("Old style: %s\n", "direct function call")
let osOld = getOS()
println("OS info (old):")
println(osOld)

// –ù–æ–≤—ã–π —Å—Ç–∏–ª—å - –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
println("\n–ù–æ–≤—ã–π —Å—Ç–∏–ª—å (–æ–±—ä–µ–∫—Ç—ã):")
Console.printf("New style: %s\n", "object method call")
let osNew = System.getOS()
println("OS info (new): " + osNew["os"])

// === 9. –¶–ï–ü–û–ß–ö–ò –í–´–ó–û–í–û–í ===
println("\n=== –¶–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ ===")

// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Ü–µ–ø–æ—á–∫–∏
let currentDir = System.getWorkingDir()
IO.printf("Working in: %s\n", currentDir)
println("Directory type: " + Debug.typeOf(currentDir))

// === 10. –û–ë–™–ï–ö–¢–ù–û-–û–†–ò–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–•–û–î ===
println("\n=== –û–û –ø–æ–¥—Ö–æ–¥ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é ===")

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
let sessionInfo = {
    "user": System.getEnv("USER"),
    "pid": Process.getPid(),
    "os": System.getOS()["os"],
    "memory": Memory.stats()["alloc"]
}

Debug.debug(sessionInfo)
IO.printf("Session: %s@%s (PID: %d, Memory: %d KB)\n", 
    sessionInfo["user"], 
    sessionInfo["os"], 
    sessionInfo["pid"], 
    sessionInfo["memory"] / 1024)

println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
println("üéâ foo_lang —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:")
println("‚úÖ Extension methods –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤")
println("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (IO, System, Process, Debug, Memory, CLI, Console)")
println("‚úÖ –û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
println("‚úÖ –ß–∏—Å—Ç—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ñ—É–Ω–∫—Ü–∏–π –≤ –æ–±—ä–µ–∫—Ç—ã")