// examples/macros_demo.foo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞–∫—Ä–æ—Å–æ–≤ foo_lang v3
// üöÄ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –º–∞–∫—Ä–æ—Å—ã

println("=== üßô‚Äç‚ôÇÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–ö–†–û–°–û–í FOO_LANG V3 ===")
println()

// 1Ô∏è‚É£ === –ü–†–û–°–¢–´–ï –ú–ê–ö–†–û–°–´ ===
println("1Ô∏è‚É£ –ü–†–û–°–¢–´–ï –ú–ê–ö–†–û–°–´:")

macro debug(varName) {
    println("DEBUG: " + varName + " = " + varName.toString())
}

let myVar = 42
@debug(myVar)

macro greet(name) {
    println("–ü—Ä–∏–≤–µ—Ç, " + name + "! üëã")
}

@greet("foo_lang")

println()

// 2Ô∏è‚É£ === –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–¢–ò–õ–ò–¢–ù–´–• –§–£–ù–ö–¶–ò–ô ===
println("2Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–¢–ò–õ–ò–¢–ù–´–• –§–£–ù–ö–¶–ò–ô:")

macro generateValidator(typeName) {
    Expr {
        println("fn validate" + typeName + "(obj) {")
        println("    if obj == null { return false }")
        println("    if typeof(obj) != 'object' { return false }")
        println("    println('Validating " + typeName + "...')")
        println("    return true")
        println("}")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ runtime
        fn validateUser(obj) {
            if obj == null { return false }
            println("Validating User...")
            return true
        }
    }
}

@generateValidator("User")

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
let user = { name: "Alice", age: 30 }
println("User valid: " + validateUser(user).toString())

println()

// 3Ô∏è‚É£ === –ú–ê–ö–†–û–°–´ –î–õ–Ø –°–¢–†–£–ö–¢–£–† ===  
println("3Ô∏è‚É£ –ú–ê–ö–†–û–°–´ –î–õ–Ø –°–¢–†–£–ö–¢–£–†:")

struct Person {
    name: string,
    age: int,
    email: string
}

macro generateStructHelpers(structParam: StructType) {
    println("Generating helpers for: " + structParam.Name)
    
    Expr {
        println("// === Generated Code for " + structParam.Name + " ===")
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        println("fn create" + structParam.Name + "(name, age, email) {")
        println("    return {")
        println("        name: name,")
        println("        age: age,") 
        println("        email: email")
        println("    }")
        println("}")
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º toString
        println("fn " + structParam.Name.toLowerCase() + "ToString(obj) {")
        println("    return obj.name + ' (' + obj.age.toString() + ') - ' + obj.email")
        println("}")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ runtime
        fn createPerson(name, age, email) {
            return { name: name, age: age, email: email }
        }
        
        fn personToString(obj) {
            return obj.name + " (" + obj.age.toString() + ") - " + obj.email
        }
    }
}

@generateStructHelpers(Person)

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let person = createPerson("Bob", 25, "bob@example.com")
println("Person: " + personToString(person))

println()

// 4Ô∏è‚É£ === –ú–ê–ö–†–û–°–´ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò CRUD ===
println("4Ô∏è‚É£ CRUD –ì–ï–ù–ï–†–ê–¶–ò–Ø:")

macro generateCRUD(entityName) {
    println("Generating CRUD for: " + entityName)
    
    Expr {
        println("// === CRUD –¥–ª—è " + entityName + " ===")
        println("let " + entityName.toLowerCase() + "Store = []")
        println()
        
        // –°–æ–∑–¥–∞–Ω–∏–µ
        println("fn create" + entityName + "(data) {")
        println("    data.id = randomString(8)")
        println("    " + entityName.toLowerCase() + "Store.push(data)")
        println("    return data")
        println("}")
        
        // –ß—Ç–µ–Ω–∏–µ
        println("fn get" + entityName + "(id) {")
        println("    for let item in " + entityName.toLowerCase() + "Store {")
        println("        if item.id == id { return item }")  
        println("    }")
        println("    return null")
        println("}")
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ  
        println("fn update" + entityName + "(id, data) {")
        println("    for let i = 0; i < " + entityName.toLowerCase() + "Store.length(); i++ {")
        println("        if " + entityName.toLowerCase() + "Store[i].id == id {")
        println("            " + entityName.toLowerCase() + "Store[i] = data")
        println("            return data")
        println("        }")
        println("    }")
        println("    return null")
        println("}")
        
        // –£–¥–∞–ª–µ–Ω–∏–µ
        println("fn delete" + entityName + "(id) {")
        println("    println('Deleting " + entityName + " with id: ' + id)")
        println("    return true")
        println("}")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ runtime (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
        let taskStore = []
        
        fn createTask(data) {
            data.id = "task_" + randomString(4)
            taskStore.push(data)
            println("Created task: " + data.id)
            return data
        }
        
        fn getTask(id) {
            println("Getting task: " + id)
            return { id: id, name: "Sample Task" }
        }
        
        fn updateTask(id, data) {
            println("Updating task: " + id)
            return data
        }
        
        fn deleteTask(id) {
            println("Deleting task: " + id)
            return true
        }
    }
}

@generateCRUD("Task")

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ CRUD API
let task = createTask({ name: "Test Task", priority: "high" })
let retrieved = getTask(task.id)
updateTask(task.id, { name: "Updated Task" })
deleteTask(task.id)

println()

// 5Ô∏è‚É£ === –ú–ê–ö–†–û–°–´ –î–õÔøΩ—è –û–†–ú/–ó–ê–ü–†–û–°–û–í ===
println("5Ô∏è‚É£ QUERY BUILDER:")

macro generateQueryBuilder(tableName) {
    println("Generating Query Builder for: " + tableName)
    
    Expr {
        println("// === Query Builder –¥–ª—è " + tableName + " ===")
        
        println("fn " + tableName.toLowerCase() + "Query() {")
        println("    return {")
        println("        table: '" + tableName + "',")
        println("        select: fn(fields) { return this },")
        println("        where: fn(condition) { return this },")
        println("        orderBy: fn(field) { return this },")
        println("        limit: fn(count) { return this },")
        println("        build: fn() { return 'SELECT * FROM ' + this.table }")
        println("    }")
        println("}")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        fn userQuery() {
            return {
                table: "users",
                query: "SELECT * FROM users",
                where: fn(condition) {
                    this.query = this.query + " WHERE " + condition
                    return this
                },
                build: fn() {
                    return this.query
                }
            }
        }
    }
}

@generateQueryBuilder("User")

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder
let query = userQuery().where("age > 18").build()
println("Generated SQL: " + query)

println()

// 6Ô∏è‚É£ === –ú–ê–ö–†–û–°–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
println("6Ô∏è‚É£ TEST GENERATION:")

macro generateTests(testName, testCases) {
    println("Generating tests for: " + testName)
    
    Expr {
        println("// === Tests –¥–ª—è " + testName + " ===")
        
        println("fn test" + testName + "() {")
        println("    println('Running " + testName + " tests...')")
        println("    let passed = 0")
        println("    let total = 3")
        println()
        println("    // Test case 1")
        println("    if testCondition1() { passed++ }")
        println("    // Test case 2") 
        println("    if testCondition2() { passed++ }")
        println("    // Test case 3")
        println("    if testCondition3() { passed++ }")
        println()
        println("    println('Tests passed: ' + passed.toString() + '/' + total.toString())")
        println("    return passed == total")
        println("}")
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        fn testMath() {
            println("Running Math tests...")
            let passed = 0
            let total = 3
            
            // Test abs
            if abs(-5) == 5 { passed = passed + 1 }
            // Test sqrt  
            if sqrt(16) == 4 { passed = passed + 1 }
            // Test pow
            if pow(2, 3) == 8 { passed = passed + 1 }
            
            println("Tests passed: " + passed.toString() + "/" + total.toString())
            return passed == total
        }
    }
}

@generateTests("Math", ["abs", "sqrt", "pow"])

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
println("Test result: " + testMath().toString())

println()
println("=== üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ê–ö–†–û–°–û–í –ó–ê–í–ï–†–®–ï–ù–ê ===")
println()
println("üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∞–∫—Ä–æ—Å–æ–≤ foo_lang:")
println("  üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
println("  üîπ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏")
println("  üîπ Query builders")
println("  üîπ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏")
println("  üîπ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã")
println("  üîπ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (StructType, FnType)")
println("  üîπ Code generation –≤ runtime")
println("  üîπ Meta-programming –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")