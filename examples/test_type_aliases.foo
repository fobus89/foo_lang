// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Type Aliases –≤ foo_lang v2

println("=== üéØ Type Aliases - –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤ ===")

// 1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
println("\n1. üìù –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã:")

type UserId = int
type UserName = string
type Score = float
type IsActive = bool

println("UserId alias —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–∏–ø–∞ int")
println("UserName alias —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–∏–ø–∞ string")
println("Score alias —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–∏–ø–∞ float")
println("IsActive alias —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–∏–ø–∞ bool")

// 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
println("\n2. üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")

let userId: UserId = 12345
let userName: UserName = "Alice"
let userScore: Score = 85.5
let userActive: IsActive = true

println("userId: " + userId.toString())
println("userName: " + userName)
println("userScore: " + userScore.toString())
println("userActive: " + userActive.toString())

// 3. –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
println("\n3. üìö –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π:")

type UserList = array
type UserData = object

let users: UserList = ["Alice", "Bob", "Charlie"]
let profile: UserData = {
    name: "Alice",
    age: 30,
    email: "alice@example.com"
}

println("users length: " + users.length().toString())
println("profile name: " + profile.name)

// 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
println("\n4. ‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö:")

fn getUserInfo(id: UserId, name: UserName) -> UserData {
    return {
        userId: id,
        userName: name,
        timestamp: "2025-01-12"
    }
}

let userInfo = getUserInfo(userId, userName)
println("Generated user info:")
println("- ID: " + userInfo.userId.toString())
println("- Name: " + userInfo.userName)
println("- Timestamp: " + userInfo.timestamp)

// 5. –¶–µ–ø–æ—á–∫–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ (–ø—Å–µ–≤–¥–æ–Ω–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞)
println("\n5. üîó –¶–µ–ø–æ—á–∫–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤:")

type PrimaryKey = UserId
type EntityId = PrimaryKey

let entityId: EntityId = 999
println("entityId (—á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤): " + entityId.toString())

// 6. –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–µ–ª–∞—é—Ç –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º
println("\n6. üìñ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞:")

fn calculateUserRank(score: Score, isActive: IsActive) -> string {
    if !isActive {
        return "Inactive"
    }
    
    if score >= 90.0 {
        return "Expert"
    } else if score >= 70.0 {
        return "Advanced"
    } else if score >= 50.0 {
        return "Intermediate"
    } else {
        return "Beginner"
    }
}

let rank = calculateUserRank(userScore, userActive)
println("User rank: " + rank)

// 7. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
println("\n7. üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:")

type Coordinate = float
type Distance = float

fn calculateDistance(x1: Coordinate, y1: Coordinate, x2: Coordinate, y2: Coordinate) -> Distance {
    let dx = x2 - x1
    let dy = y2 - y1
    return sqrt(dx * dx + dy * dy)
}

let distance = calculateDistance(0.0, 0.0, 3.0, 4.0)
println("Distance between points: " + distance.toString())

println("\n‚úÖ Type Aliases –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
println("üéâ –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤ –¥–µ–ª–∞—é—Ç –∫–æ–¥ –±–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º!")