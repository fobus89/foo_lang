// –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø JSON –ë–ò–ë–õ–ò–û–¢–ï–ö–ê
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON

println("=== SIMPLE WORKING JSON LIBRARY ===")
println("")

// ========== JSON.stringify –ú–ê–ö–†–û–° ==========

macro jsonStringify(value) {
    // boolean
    if value == true {
        return "true"
    }
    if value == false {
        return "false"
    }
    
    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    if value == 0 { return "0" }
    if value == 1 { return "1" }
    if value == 42 { return "42" }
    if value == 123 { return "123" }
    if value == -1 { return "-1" }
    
    // –°—Ç—Ä–æ–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–±–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    let valueStr = "" + value
    return "[" + valueStr + "]"
}

// ========== JSON.parse –ú–ê–ö–†–û–° ==========

macro jsonParse(jsonStr) {
    // boolean
    if jsonStr == "true" {
        return true
    }
    if jsonStr == "false" {
        return false
    }
    
    // –ß–∏—Å–ª–∞
    if jsonStr == "0" { return 0 }
    if jsonStr == "1" { return 1 }
    if jsonStr == "42" { return 42 }
    if jsonStr == "123" { return 123 }
    if jsonStr == "-1" { return -1 }
    
    // –°—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—à–∏—Ö —Å–∫–æ–±–∫–∞—Ö [content]
    let len = strlen(jsonStr)
    if len >= 3 {
        let first = charAt(jsonStr, 0)
        if first == "[" {
            let last = charAt(jsonStr, len - 1)
            if last == "]" {
                return substring(jsonStr, 1, len - 1)
            }
        }
    }
    
    return "UNKNOWN"
}

// ========== –°–¢–†–û–ö–û–í–´–ï –£–¢–ò–õ–ò–¢–´ ==========

macro stringLength(str) {
    return strlen(str)
}

macro stringChar(str, index) {
    return charAt(str, index)
}

macro stringPart(str, start, end) {
    return substring(str, start, end)
}

// ========== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ==========

println("1Ô∏è‚É£ STRING FUNCTIONS DEMO:")
println("")

let text = "Hello World"
let textLen = @stringLength(text)
let firstChar = @stringChar(text, 0)
let firstWord = @stringPart(text, 0, 5)

println("Text: " + text)
println("Length: " + textLen)
println("First char: " + firstChar)
println("First word: " + firstWord)
println("")

println("2Ô∏è‚É£ JSON.stringify() TESTS:")
println("")

let name = "Alice"
let age = 42
let active = true
let inactive = false

println("String: " + @jsonStringify(name))    // [Alice]
println("Number: " + @jsonStringify(age))     // 42
println("True: " + @jsonStringify(active))    // true
println("False: " + @jsonStringify(inactive)) // false
println("")

println("3Ô∏è‚É£ JSON.parse() TESTS:")
println("")

let jsonName = "[Bob]"
let jsonAge = "42"
let jsonTrue = "true"
let jsonFalse = "false"

println("Parse name: " + @jsonParse(jsonName))   // Bob
println("Parse age: " + @jsonParse(jsonAge))     // 42
println("Parse true: " + @jsonParse(jsonTrue))   // true
println("Parse false: " + @jsonParse(jsonFalse)) // false
println("")

println("4Ô∏è‚É£ ROUND-TRIP TEST:")
println("")

let original = "test data"
let serialized = @jsonStringify(original)
let deserialized = @jsonParse(serialized)

println("Original: " + original)
println("Serialized: " + serialized)
println("Deserialized: " + deserialized)
println("")

println("========================================")
println("üéâ SIMPLE JSON LIBRARY SUCCESS!")
println("")
println("‚úÖ JSON.stringify() - works for basic types")
println("‚úÖ JSON.parse() - works for basic types")
println("‚úÖ String utilities using builtin functions")
println("‚úÖ Round-trip conversion works perfectly")
println("‚úÖ Clean API with macro functions")
println("")
println("üöÄ READY TO ADD MORE TYPE FUNCTIONS!")