// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–Ω–∞–ª–æ–≤ –≤ foo_lang
print("=== –î–ï–ú–û: –ö–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ ===")

// === 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ ===
print("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ ---")

// –ù–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
let unbufferedCh = newChannel()
print("–ù–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")

// –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
let bufferedCh = newChannel(3)
print("–ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω (–±—É—Ñ–µ—Ä: 3)")

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ: " + channelInfo(unbufferedCh))
print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ: " + channelInfo(bufferedCh))

// === 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
print("\n--- –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª ---")

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
send(bufferedCh, "Hello")
send(bufferedCh, "World")
send(bufferedCh, 42)

print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª")
print("–î–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞: " + len(bufferedCh).toString())
print("–ï–º–∫–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞: " + cap(bufferedCh).toString())

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
let msg1 = receive(bufferedCh)
let msg2 = receive(bufferedCh)
let msg3 = receive(bufferedCh)

print("–ü–æ–ª—É—á–µ–Ω–æ: " + msg1 + ", " + msg2 + ", " + msg3.toString())
print("–î–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è: " + len(bufferedCh).toString())

// === 3. –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ===
print("\n--- –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ---")

// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—É—Å—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
let result = tryReceive(bufferedCh)
if result == "no_value" {
    print("‚úÖ –ö–∞–Ω–∞–ª –ø—É—Å—Ç - tryReceive –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 'no_value'")
} else {
    print("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—É—Å—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Ç—É—Ç –∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å
send(bufferedCh, "test_message")
let quickResult = tryReceive(bufferedCh)
print("–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ: " + quickResult)

// === 4. Async + –∫–∞–Ω–∞–ª—ã ===
print("\n--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏ ---")

// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
let asyncCh = make("chan", 5)

// –§—É–Ω–∫—Ü–∏—è-–ø—Ä–æ–¥—é—Å–µ—Ä (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ)
fn producer(ch, name, count) {
    for let i = 1; i <= count; i++ {
        let message = name + "_item_" + i.toString()
        send(ch, message)
        print("üì§ –ü—Ä–æ–¥—é—Å–µ—Ä " + name + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + message)
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        await sleep(50) // 50–º—Å
    }
}

// –§—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—É–º–µ—Ä (–ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ)
fn consumer(ch, name, count) {
    for let i = 1; i <= count; i++ {
        let message = receive(ch)
        print("üì• –ö–æ–Ω—Å—É–º–µ—Ä " + name + " –ø–æ–ª—É—á–∏–ª: " + message)
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
let prod1 = async producer(asyncCh, "A", 3)
let prod2 = async producer(asyncCh, "B", 2)

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å—É–º–µ—Ä–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
let cons1 = async consumer(asyncCh, "Main", 5)

// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
await Promise.all(prod1, prod2, cons1)

print("‚úÖ –í—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

// === 5. –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–æ–≤ ===
print("\n--- –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–æ–≤ ---")

let testCh = make("chan", 2)
send(testCh, "last_message")

print("–ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º: " + channelInfo(testCh))
close(testCh)
print("–ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: " + channelInfo(testCh))

// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
let finalMsg = tryReceive(testCh)
if finalMsg != "no_value" {
    print("–ü–æ–ª—É—á–∏–ª–∏ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞: " + finalMsg)
}

// === 6. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä - –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===
print("\n--- –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---")

let inputCh = make("chan", 3)
let outputCh = make("chan", 3)

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
fn processor(input, output) {
    let data = receive(input)
    let processed = "PROCESSED[" + data + "]"
    send(output, processed)
    return processed
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
send(inputCh, "data1")
send(inputCh, "data2")
send(inputCh, "data3")

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
let task1 = async processor(inputCh, outputCh)
let task2 = async processor(inputCh, outputCh)
let task3 = async processor(inputCh, outputCh)

// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
await Promise.all(task1, task2, task3)

// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
let result1 = receive(outputCh)
let result2 = receive(outputCh)
let result3 = receive(outputCh)

print("- " + result1)
print("- " + result2)
print("- " + result3)

// === –ò—Ç–æ–≥–∏ ===
print("\n=== –ò—Ç–æ–≥–∏ ===")
print("‚úÖ –ö–∞–Ω–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
print("‚úÖ –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
print("‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å async/await")
print("‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–æ–≤")
print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
print("üì° –ö–∞–Ω–∞–ª—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏")