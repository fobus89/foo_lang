// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Bytecode –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ foo_lang
print("=== –î–ï–ú–û: Bytecode –∫–æ–º–ø–∏–ª—è—Ü–∏—è ===")

// –ë–∞–∑–æ–≤—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
print("\n--- –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ---")
let a = 42
let b = 13
let sum = a + b
let difference = a - b
let product = a * b
let quotient = a / b

print("a = " + a.toString())
print("b = " + b.toString())
print("a + b = " + sum.toString())
print("a - b = " + difference.toString())
print("a * b = " + product.toString())
print("a / b = " + quotient.toString())

// –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
print("\n--- –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ---")
let x = true
let y = false
print("x = " + x.toString())
print("y = " + y.toString())
print("x && y = " + (x && y).toString())
print("x || y = " + (x || y).toString())
print("!x = " + (!x).toString())
print("!y = " + (!y).toString())

// –û–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
print("\n--- –°—Ä–∞–≤–Ω–µ–Ω–∏—è ---")
print("a == b: " + (a == b).toString())
print("a != b: " + (a != b).toString())
print("a > b: " + (a > b).toString())
print("a < b: " + (a < b).toString())
print("a >= b: " + (a >= b).toString())
print("a <= b: " + (a <= b).toString())

// –£—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
print("\n--- –£—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ---")
if (a > b) {
    print("a –±–æ–ª—å—à–µ b")
} else {
    print("a –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ b")
}

let max = if (a > b) { a } else { b }
print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + max.toString())

// –¶–∏–∫–ª—ã
print("\n--- –¶–∏–∫–ª—ã ---")
print("–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –æ—Ç 5:")
for let counter = 5; counter > 0; counter-- {
    print("–°—á–µ—Ç—á–∏–∫: " + counter.toString())
}
print("–û—Ç—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

// –ú–∞—Å—Å–∏–≤—ã
print("\n--- –ú–∞—Å—Å–∏–≤—ã ---")
let numbers = [10, 20, 30, 40, 50]
print("–ú–∞—Å—Å–∏–≤ —Å–æ–∑–¥–∞–Ω: [10, 20, 30, 40, 50]")
print("–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: " + numbers[0].toString())
print("–¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç: " + numbers[2].toString())
print("–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: " + numbers[4].toString())

// –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
print("\n--- –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ---")
let greeting = "Hello"
let target = "World"
let message = greeting + ", " + target + "!"
print("–°–æ–æ–±—â–µ–Ω–∏–µ: " + message)

let words = ["foo", "lang", "bytecode"]
print("–°–ª–æ–≤–∞: " + words[0] + " " + words[1] + " " + words[2])

// –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
print("\n--- –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ---")
let result = ((a + b) * 2) - (a / b)
print("((a + b) * 2) - (a / b) = " + result.toString())

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
print("\n--- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---")
let value1 = 100
let value2 = value1 + 50
let value3 = value2 * 2
print("value1 = " + value1.toString())
print("value2 = value1 + 50 = " + value2.toString())
print("value3 = value2 * 2 = " + value3.toString())

// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π
print("\n--- –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---")
let total = 0

for let start = 1; start <= 10; start++ {
    total = total + start
}

print("–°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10: " + total.toString())

// –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
print("\n--- –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ---")
let complex1 = (a + b) * (a - b)
let complex2 = (a * b) / (a + 1)
let complex3 = !((a > b) && (b > 0))

print("(a + b) * (a - b) = " + complex1.toString())
print("(a * b) / (a + 1) = " + complex2.toString())
print("!((a > b) && (b > 0)) = " + complex3.toString())

print("\n=== Bytecode –¥–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")
print("üöÄ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ bytecode VM!")
print("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º")