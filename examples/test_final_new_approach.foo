// –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

struct User {
    name: string,
    age: int
}

macro demonstrateNewApproach(structParam: StructType) {
    println("=== Macro-time: Processing " + structParam.Name + " ===")
    
    generate {
        fn create${structParam.Name}(name, age) {
            return ${structParam.Name}{name: name, age: age}
        }
        
        fn print${structParam.Name}DetailedInfo(obj) {
            println("=== Detailed ${structParam.Name} Info ===")
            println("Type: ${structParam.Kind}")
            println("Name: " + obj.name)
            println("Age: " + obj.age.toString())
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ macro-time
            println("Generated line 1 for ${structParam.Name}")
            println("Generated line 2 for ${structParam.Name}") 
            println("Generated line 3 for ${structParam.Name}")
        }
        
        fn get${structParam.Name}Summary(obj) {
            return "${structParam.Name}: " + obj.name + " (" + obj.age.toString() + " years)"
        }
    }
}

println("=== –ù–û–í–´–ô –ü–û–î–•–û–î: Compile-time $ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===")
println("")

@demonstrateNewApproach(User)

let user = createUser("Alice", 25)
printUserDetailedInfo(user)

let summary = getUserSummary(user)
println(summary)

println("")
println("üî• –ß–¢–û –ò–ó–ú–ï–ù–ò–¢–°–Ø:")
println("")
println("–¢–ï–ö–£–©–ò–ô –ü–û–î–•–û–î:")
println("  - –í—Å—ë –≤ generate {} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–¥")
println("  - –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è ${} —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
println("  - –¶–∏–∫–ª—ã/—É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ runtime")
println("")
println("–ù–û–í–´–ô –ü–û–î–•–û–î ($ –ø—Ä–µ—Ñ–∏–∫—Å—ã):")
println("  - $if = compile-time —É—Å–ª–æ–≤–∏–µ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –º–∞–∫—Ä–æ—Å–∞)")
println("  - if  = runtime —É—Å–ª–æ–≤–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)")
println("  - $for = compile-time —Ü–∏–∫–ª (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥)")
println("  - for  = runtime —Ü–∏–∫–ª (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)")
println("  - $let = compile-time –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–¥–ª—è –º–∞–∫—Ä–æ—Å–∞)")
println("  - let  = runtime –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)")
println("")
println("–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
println("  ‚úÖ –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ compile-time vs runtime")
println("  ‚úÖ –ú–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("  ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
println("  ‚úÖ –ù–µ—Ç –ø—É—Ç–∞–Ω–∏—Ü—ã —Å ${} –±–ª–æ–∫–∞–º–∏")