// –ü–æ–ª–Ω–æ–µ –¥–µ–º–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–µ
print("=== –ü–æ–ª–Ω–æ–µ HTTP –î–µ–º–æ: –ö–ª–∏–µ–Ω—Ç + –°–µ—Ä–≤–µ—Ä ===")

// –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä...")

httpCreateServer()

// –ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
fn apiHandler(request) {
    print("–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: " + request.method + " " + request.path)
    
    if (request.path == "/api/users" && request.method == "GET") {
        let users = {
            "users": [
                {"id": 1, "name": "Alice", "email": "alice@example.com"},
                {"id": 2, "name": "Bob", "email": "bob@example.com"}
            ],
            "total": 2
        }
        return {
            "status": 200,
            "headers": {"Content-Type": "application/json"},
            "body": jsonStringify(users)
        }
    }
    
    if (request.path == "/api/users" && request.method == "POST") {
        let response = {
            "message": "User created",
            "received_data": request.body,
            "id": 3
        }
        return {
            "status": 201,
            "headers": {"Content-Type": "application/json"},
            "body": jsonStringify(response)
        }
    }
    
    if (request.path == "/api/ping") {
        return {
            "status": 200,
            "headers": {"Content-Type": "application/json"},
            "body": "{\\"message\\": \\"pong\\", \\"timestamp\\": \\"2025-01-12\\"}"
        }
    }
    
    // 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    return {
        "status": 404,
        "headers": {"Content-Type": "application/json"},
        "body": "{\\"error\\": \\"Not found\\"}"
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
httpRoute("GET", "/api/users", apiHandler)
httpRoute("POST", "/api/users", apiHandler)
httpRoute("GET", "/api/ping", apiHandler)

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
httpStartServer(8080)
print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")

// –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
await sleep(500)

print("\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Ç–∏–≤ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")

// –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/ping")
let pingResponse = httpGet("http://localhost:8080/api/ping")
print("–°—Ç–∞—Ç—É—Å: " + pingResponse.status.toString())
print("–û—Ç–≤–µ—Ç: " + pingResponse.body)

// –¢–µ—Å—Ç 2: GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/users")
let usersResponse = httpGet("http://localhost:8080/api/users")
print("–°—Ç–∞—Ç—É—Å: " + usersResponse.status.toString())
print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: " + usersResponse.body)

// –¢–µ—Å—Ç 3: POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/users")
let newUser = {
    "name": "Charlie",
    "email": "charlie@example.com",
    "age": 25
}
let createResponse = httpPost("http://localhost:8080/api/users", newUser)
print("–°—Ç–∞—Ç—É—Å: " + createResponse.status.toString())
print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + createResponse.body)

// –¢–µ—Å—Ç 4: 404 –æ—à–∏–±–∫–∞
print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º 404 –æ—à–∏–±–∫—É")
let notFoundResponse = httpGet("http://localhost:8080/api/nonexistent")
print("–°—Ç–∞—Ç—É—Å: " + notFoundResponse.status.toString())
print("–û—à–∏–±–∫–∞: " + notFoundResponse.body)

// –¢–µ—Å—Ç 5: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

fn asyncPingTest(id) {
    let response = httpGet("http://localhost:8080/api/ping")
    return "Async ping " + id.toString() + " - —Å—Ç–∞—Ç—É—Å: " + response.status.toString()
}

print("–ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö ping –∑–∞–ø—Ä–æ—Å–æ–≤...")
let ping1 = async asyncPingTest(1)
let ping2 = async asyncPingTest(2)
let ping3 = async asyncPingTest(3)
let ping4 = async asyncPingTest(4)
let ping5 = async asyncPingTest(5)

// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let pingResults = await Promise.all(ping1, ping2, ping3, ping4, ping5)
print("–í—Å–µ ping –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã:")
for (let i = 0; i < pingResults.length(); i++) {
    print("  " + pingResults[i])
}

// –¢–µ—Å—Ç 6: –ì–æ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–≤—ã–π –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π—Å—è)
print("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–Ω–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ (Promise.any)")
let race1 = async asyncPingTest(101)
let race2 = async asyncPingTest(102)
let race3 = async asyncPingTest(103)

let winner = await Promise.any(race1, race2, race3)
print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–Ω–∫–∏: " + winner)

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print("\n7. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")

fn sequentialRequests() {
    for (let i = 0; i < 10; i++) {
        let response = httpGet("http://localhost:8080/api/ping")
        print("–ó–∞–ø—Ä–æ—Å " + (i + 1).toString() + " - —Å—Ç–∞—Ç—É—Å: " + response.status.toString())
    }
    return "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

fn parallelRequests() {
    let tasks = []
    for (let i = 0; i < 10; i++) {
        tasks.push(async asyncPingTest(i + 1))
    }
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Promise.all –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    // –ù–æ –¥–ª—è –¥–µ–º–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ—â–µ
    return "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

let seqResult = sequentialRequests()
print(seqResult)

// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
print("\n8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
let finalCheck = httpGet("http://localhost:8080/api/ping")
print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: " + finalCheck.status.toString())

print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
let stopResult = httpStopServer()
print(stopResult)

print("\n‚úÖ –ü–æ–ª–Ω–æ–µ HTTP –¥–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print("  - –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª ~20+ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
print("  - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã GET –∏ POST –º–µ—Ç–æ–¥—ã")
print("  - –†–∞–±–æ—Ç–∞–µ—Ç JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è")
print("  - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
print("  - HTTP –∫–ª–∏–µ–Ω—Ç –∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")

print("\nüéâ foo_lang —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTTP!")