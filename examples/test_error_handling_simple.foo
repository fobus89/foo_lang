// –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
// üî• Result<T, E> —Ç–∏–ø—ã –≤–º–µ—Å—Ç–æ panic()

println("=== –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Result —Ç–∏–ø–æ–≤ ===\n")

// === 1. –°–û–ó–î–ê–ù–ò–ï Result –¢–ò–ü–û–í ===
println("1. –°–æ–∑–¥–∞–Ω–∏–µ Result —Ç–∏–ø–æ–≤:")

// –°–æ–∑–¥–∞–µ–º Ok —Ä–µ–∑—É–ª—å—Ç–∞—Ç
let success = Ok("Operation successful")
println("Success result: " + success)
println("Is Ok: " + success.isOk())
println("Is Err: " + success.isErr())
println("Value: " + success.unwrap())

// –°–æ–∑–¥–∞–µ–º Err —Ä–µ–∑—É–ª—å—Ç–∞—Ç
let failure = Err("Operation failed")
println("\nFailure result: " + failure)
println("Is Ok: " + failure.isOk())
println("Is Err: " + failure.isErr())
println("Default value: " + failure.unwrapOr("Default"))

// === 2. –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô ===
println("\n2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:")

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è Result
fn divide(a, b) {
    if b == 0.0 {
        return Err("Division by zero")
    }
    return Ok(a / b)
}

let result1 = divide(10.0, 2.0)
if result1.isOk() {
    println("10 / 2 = " + result1.unwrap())
} else {
    println("Division failed")
}

let result2 = divide(10.0, 0.0) 
if result2.isErr() {
    println("Division by zero handled: " + result2.unwrapOr("ERROR"))
}

// === 3. PATTERN MATCHING –° Result ===
println("\n3. Pattern matching —Å Result:")

fn processNumber(n) {
    if n < 0 {
        return Err("Negative numbers not allowed")
    }
    if n == 0 {
        return Err("Zero is not valid")
    }
    return Ok(n * 2)
}

let numbers = [5, -3, 0, 8]
for let i = 0; i < numbers.length(); i++ {
    let num = numbers[i]
    let result = processNumber(num)
    
    if result.isOk() {
        println("Processed " + num + " -> " + result.unwrap())
    } else {
        println("Error for " + num + ": " + result.unwrapOr("ERROR"))
    }
}

// === 4. –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï unwrapOr ===
println("\n4. –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å unwrapOr:")

fn getConfig(key) {
    let configs = {
        "host": "localhost",
        "port": "8080"
    }
    
    if configs[key] {
        return Ok(configs[key])
    } else {
        return Err("Config not found: " + key)
    }
}

let host = getConfig("host").unwrapOr("default-host")
let port = getConfig("port").unwrapOr("3000")
let timeout = getConfig("timeout").unwrapOr("30")

println("Host: " + host)
println("Port: " + port)  
println("Timeout (default): " + timeout)

// === 5. CHAIN OF RESULTS ===
println("\n5. –¶–µ–ø–æ—á–∫–∞ Result –æ–ø–µ—Ä–∞—Ü–∏–π:")

fn validateAge(age) {
    if age < 0 {
        return Err("Age cannot be negative")
    }
    if age > 120 {
        return Err("Age too high")
    }
    return Ok(age)
}

fn classifyAge(age) {
    if age < 18 {
        return Ok("Minor")
    } else if age < 65 {
        return Ok("Adult")
    } else {
        return Ok("Senior")
    }
}

let ages = [25, -5, 150, 70]
for let i = 0; i < ages.length(); i++ {
    let age = ages[i]
    let validAge = validateAge(age)
    if validAge.isOk() {
        let classification = classifyAge(validAge.unwrap())
        println("Age " + age + " -> " + classification.unwrap())
    } else {
        println("Age " + age + " -> Invalid: " + validAge.unwrapOr("ERROR"))
    }
}

// === 6. Result –í –ö–û–õ–õ–ï–ö–¶–ò–Ø–• ===
println("\n6. Result –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö:")

// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let results = [
    Ok("success1"),
    Err("error1"),
    Ok("success2"),
    Err("error2"),
    Ok("success3")
]

let successes = []
let errors = []

for let i = 0; i < results.length(); i++ {
    let result = results[i]
    if result.isOk() {
        successes = successes.push(result.unwrap())
    } else {
        errors = errors.push(result.unwrapOr("UNKNOWN_ERROR"))
    }
}

println("Successes: " + successes)
println("Errors: " + errors)

println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
println("üéâ Result —Ç–∏–ø—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:")
println("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –±–µ–∑ panic()")
println("‚úÖ –Ø–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏")
println("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ unwrapOr")
println("‚úÖ Pattern matching –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
println("‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫")