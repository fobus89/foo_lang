// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

println("üöÄ foo_lang v3 - –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
println("=====================================")

// 1. STDIO - –ë–∞–∑–æ–≤—ã–π –≤–≤–æ–¥/–≤—ã–≤–æ–¥
println("\nüìù 1. STDIO Functions")
printf("Formatted output: %s = %d\\n", "answer", 42)
writeLn("Multiple values:", 1, 2.5, true, null)

// 2. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
println("\nüñ•Ô∏è  2. System Information")
let osInfo = getOS()
printf("Running on: %s/%s with %d CPUs\\n", osInfo["os"], osInfo["arch"], osInfo["cpus"])
println("Current directory:", getWorkingDir())
println("Process PID:", getPid())

// 3. CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã  
println("\nüîß 3. CLI Arguments")
println("Script:", getScriptName())
println("Arguments count:", getArgCount())
if getArgCount() > 0 {
    println("Arguments:", getArgs())
}

// 4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
println("\nüåç 4. Environment Variables")
let user = getEnv("USER")
if user {
    println("Current user:", user)
}
println("PATH exists:", getEnv("PATH") != null)

// 5. –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
println("\nüêõ 5. Debug Functions")
let testObj = {
    name: "Test Object",
    data: [1, 2, 3],
    active: true
}
println("Object type:", typeOf(testObj))
println("Object size:", sizeOf(testObj), "bytes")

// 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
println("\nüìä 6. Memory Statistics")
let mem = memStats()
printf("Memory: %d KB allocated, %d objects, %d GC runs\\n", mem["alloc"] / 1024, mem["heap_objects"], mem["gc_count"])

// 7. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
println("\n‚öôÔ∏è  7. Process Execution")
let result = exec("echo", "Hello from subprocess!")
if result["success"] {
    println("Command output:", result["stdout"])
} else {
    println("Command failed:", result["error"])
}

// 8. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
println("\nüî¢ 8. Enhanced Math")
let numbers = [1, 2, 3, 4, 5]
println("Numbers:", numbers)
println("First number absolute:", abs(numbers[0]))  // –§—É–Ω–∫—Ü–∏—è abs

// 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
println("\nüè∑Ô∏è  9. Type System")
let x: int = 100
let y: float = 3.14
let message: string = "Typed variables work!"
println("x (int):", x, "- type:", typeOf(x))
println("y (float):", y, "- type:", typeOf(y))  
println("message (string):", message, "- type:", typeOf(message))

// 10. –§–ª–∞–≥–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥
println("\nüö© 10. Flag Parsing")
let debugMode = getFlag("debug", false)
let port = getFlag("port", "8080") 
printf("Debug mode: %s, Port: %s\\n", debugMode, port)

println("\n‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
println("=====================================")
println("üéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
println("   go run main.go examples/test_new_features.foo --debug --port=3000")
println("")