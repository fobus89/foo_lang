// –†–∞–±–æ—á–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Result —Ç–∏–ø–æ–≤
// üî• –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

println("=== –†–∞–±–æ—Ç–∞—é—â–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Result —Ç–∏–ø–æ–≤ ===\n")

// === 1. –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê Result ===
println("1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Result:")

let success = Ok("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
println("Success: " + success)
println("Is Ok: " + success.isOk())
println("Is Err: " + success.isErr())

if success.isOk() {
    println("–ó–Ω–∞—á–µ–Ω–∏–µ: " + success.unwrap())
}

let failure = Err("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
println("\nFailure: " + failure)
println("Is Ok: " + failure.isOk()) 
println("Is Err: " + failure.isErr())
println("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + failure.unwrapOr("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"))

// === 2. –§–£–ù–ö–¶–ò–ò –° Result ===
println("\n2. –§—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ Result:")

fn safeDivide(a, b) {
    if b == 0 {
        return Err("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
    }
    return Ok(a / b)
}

let result1 = safeDivide(10, 2)
if result1.isOk() {
    println("10 / 2 = " + result1.unwrap())
} else {
    println("–û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è")
}

let result2 = safeDivide(10, 0)
if result2.isErr() {
    println("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " + result2.unwrapOr("–û–®–ò–ë–ö–ê"))
}

// === 3. –¶–ï–ü–û–ß–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò ===
println("\n3. –¶–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:")

fn validateNumber(num) {
    if num < 0 {
        return Err("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    }
    if num > 100 {
        return Err("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ") 
    }
    return Ok(num)
}

fn processNumber(num) {
    let validated = validateNumber(num)
    if validated.isErr() {
        return validated  // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
    
    let value = validated.unwrap()
    return Ok("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " + (value * 2))
}

let testNumbers = [50, -10, 150, 25]
for let i = 0; i < testNumbers.length(); i++ {
    let num = testNumbers[i]
    let result = processNumber(num)
    
    if result.isOk() {
        println("–ß–∏—Å–ª–æ " + num + " -> " + result.unwrap())
    } else {
        println("–ß–∏—Å–ª–æ " + num + " -> –û—à–∏–±–∫–∞: " + result.unwrapOr("–ù–ï–ò–ó–í–ï–°–¢–ù–û"))
    }
}

// === 4. unwrapOr –î–õ–Ø –ó–ù–ê–ß–ï–ù–ò–ô –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ===
println("\n4. –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")

fn getConfig(key) {
    let config = {
        "host": "localhost",
        "port": "8080",
        "debug": "true"
    }
    
    if config[key] {
        return Ok(config[key])
    } else {
        return Err("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: " + key)
    }
}

let host = getConfig("host").unwrapOr("default-host")
let port = getConfig("port").unwrapOr("3000")
let timeout = getConfig("timeout").unwrapOr("30")
let debug = getConfig("debug").unwrapOr("false")

println("Host: " + host)
println("Port: " + port)
println("Timeout (default): " + timeout)
println("Debug: " + debug)

// === 5. –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ò–ï Result ===
println("\n5. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")

let okResult1 = Ok(42)
let okResult2 = Ok("hello")
let errResult = Err("failure")

fn combineTwo(r1, r2) {
    if r1.isErr() {
        return r1
    }
    if r2.isErr() {
        return r2
    }
    
    let combined = [r1.unwrap(), r2.unwrap()]
    return Ok(combined)
}

let combined1 = combineTwo(okResult1, okResult2)
if combined1.isOk() {
    println("–£—Å–ø–µ—à–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: " + combined1.unwrap())
}

let combined2 = combineTwo(okResult1, errResult)
if combined2.isErr() {
    println("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: " + combined2.unwrapOr("–û–®–ò–ë–ö–ê"))
}

// === 6. Result –í –ö–û–õ–õ–ï–ö–¶–ò–Ø–• ===
println("\n6. –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ Result:")

let results = [
    Ok("success1"),
    Err("error1"), 
    Ok("success2"),
    Err("error2"),
    Ok("success3")
]

let successes = []
let errors = []

for let i = 0; i < results.length(); i++ {
    let result = results[i]
    if result.isOk() {
        successes = successes.push(result.unwrap())
    } else {
        errors = errors.push(result.unwrapOr("UNKNOWN"))
    }
}

println("–£—Å–ø–µ—Ö–∏: " + successes)
println("–û—à–∏–±–∫–∏: " + errors)

// === 7. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–† ===
println("\n7. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:")

fn parseAge(ageStr) {
    if ageStr == "25" {
        return Ok(25)
    } else if ageStr == "30" {
        return Ok(30)  
    } else if ageStr == "invalid" {
        return Err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
    } else {
        return Err("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ageStr)
    }
}

fn categorizeAge(age) {
    if age < 18 {
        return Ok("–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")
    } else if age < 65 {
        return Ok("–í–∑—Ä–æ—Å–ª—ã–π")
    } else {
        return Ok("–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä")
    }
}

fn processAgeString(ageStr) {
    let parsed = parseAge(ageStr)
    if parsed.isErr() {
        return parsed
    }
    
    let age = parsed.unwrap()
    let category = categorizeAge(age)
    return category
}

let testAges = ["25", "30", "invalid", "unknown"]
for let i = 0; i < testAges.length(); i++ {
    let ageStr = testAges[i]
    let result = processAgeString(ageStr)
    
    if result.isOk() {
        println("'" + ageStr + "' -> " + result.unwrap())
    } else {
        println("'" + ageStr + "' -> –û—à–∏–±–∫–∞: " + result.unwrapOr("–ü–ê–†–°–ò–ù–ì_–û–®–ò–ë–ö–ò"))
    }
}

println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
println("üéâ Result —Ç–∏–ø—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:")
println("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –±–µ–∑ –ø–∞–Ω–∏–∫–∏") 
println("‚úÖ –Ø–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏")
println("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ unwrapOr")
println("‚úÖ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
println("‚úÖ –ö–æ–º–ø–æ–∑–∏—Ü–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫")