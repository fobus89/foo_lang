// Тест продвинутых макросов с macro-time выполнением и Expr блоками

struct User {
    name: string,
    age: int
}

// Макрос с macro-time анализом и генерацией кода
macro analyzeAndGenerate(typeInfo) {
    // Macro-time: анализируем тип во время компиляции
    println("=== MACRO-TIME ANALYSIS ===")
    println("Analyzing type: " + typeInfo.Name)
    println("Type kind: " + typeInfo.Kind)
    
    if typeInfo.isStruct() {
        println("Found struct with fields")
    }
    
    // Expr блок: генерируем код
    Expr {
        println("=== GENERATED CODE ===")
        if typeInfo.isStruct() {
            println("// Generated constructor for " + typeInfo.Name)
            println("fn create" + typeInfo.Name + "() {")
            println("    return {}")
            println("}")
        }
    }
}

// Макрос только с macro-time кодом (без генерации)
macro showTypeAnalysis(someType) {
    println("=== TYPE ANALYSIS (MACRO-TIME ONLY) ===")
    println("Type: " + someType.Name)
    println("Is struct: " + someType.isStruct())
    println("Is primitive: " + someType.isPrimitive())
}

println("=== Тестирование продвинутых макросов ===")

let userType = type(User)
let intType = type(int)

// Вызываем макрос с macro-time + code generation
@analyzeAndGenerate(userType)

println()

// Вызываем макрос только с macro-time
@showTypeAnalysis(userType)
@showTypeAnalysis(intType)

println("\nТест завершен!")
