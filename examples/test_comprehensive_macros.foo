// Комплексная демонстрация macro-time метапrogrammирования

struct User {
    name: string,
    age: int,
    email: string
}

struct Product {
    title: string,
    price: float,
    inStock: bool
}

// Макрос для анализа и генерации кода на основе типа
macro generateCRUD(entityType) {
    // MACRO-TIME: Анализ во время компиляции
    println("=== MACRO-TIME ANALYSIS ===")
    println("Generating CRUD for: " + entityType.Name)
    println("Type kind: " + entityType.Kind)
    
    if entityType.isStruct() {
        println("✅ Struct detected - generating full CRUD")
    } else {
        println("❌ Not a struct - limited generation")
    }
    
    // CODE GENERATION: Генерируем код
    Expr {
        println("=== GENERATED CODE ===")
        
        if entityType.isStruct() {
            // Генерируем constructor
            println("// Constructor for " + entityType.Name)
            println("fn create" + entityType.Name + "() {")
            println("    return {}")
            println("}")
            println("")
            
            // Генерируем validator
            println("// Validator for " + entityType.Name)
            println("fn validate" + entityType.Name + "(obj) {")
            println("    // Validation logic here")
            println("    return true")
            println("}")
            println("")
            
            // Генерируем serializer
            println("// Serializer for " + entityType.Name)
            println("fn serialize" + entityType.Name + "(obj) {")
            println("    return JSON.stringify(obj)")
            println("}")
        } else {
            println("// Simple handler for primitive type")
            println("fn process" + entityType.Name + "(value) {")
            println("    return value")
            println("}")
        }
    }
}

// Макрос для условной генерации на основе типа
macro smartGenerator(someType) {
    // Macro-time анализ
    println("=== SMART ANALYSIS ===")
    
    let isStruct = someType.isStruct()
    let isPrimitive = someType.isPrimitive()
    
    println("Type: " + someType.Name)
    println("isStruct: " + isStruct)  
    println("isPrimitive: " + isPrimitive)
    
    // Условная генерация кода
    Expr {
        if someType.isStruct() {
            println("// Generated struct utilities")
            println("fn new" + someType.Name + "() { return {} }")
        } else if someType.isPrimitive() {
            println("// Generated primitive utilities")
            println("fn default" + someType.Name + "() { return nil }")
        }
    }
}

println("=== Comprehensive Macro Testing ===")

let userType = type(User)
let productType = type(Product)
let stringType = type(string)

println("\n1. CRUD Generation for User:")
@generateCRUD(userType)

println("\n2. CRUD Generation for Product:")
@generateCRUD(productType)

println("\n3. Smart Generation for different types:")
@smartGenerator(userType)
@smartGenerator(stringType)

println("\n=== All tests completed! ===")