// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å compile-time –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏

struct User {
    name: string,
    age: int
}

struct Product {
    name: string,
    price: float
}

// –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ –ö–ê–ö –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨ —Å –Ω–æ–≤—ã–º –ø–æ–¥—Ö–æ–¥–æ–º $ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤:

/*
macro generateAccessors(structParam: StructType) {
    println("=== Macro-time: Processing " + structParam.Name + " ===")
    
    generate {
        // $if - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–∞–∫—Ä–æ—Å–∞
        $if structParam.Name == "User" {
            fn create${structParam.Name}(name, age) {
                return ${structParam.Name}{name: name, age: age}
            }
        }
        
        // $for - —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–∞–∫—Ä–æ—Å–∞  
        $for field in structParam.Fields {
            fn get${field.Name}(obj) {
                return obj.${field.name}
            }
        }
        
        // $let - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–∞–∫—Ä–æ—Å–∞
        $let methodCount = 3
        
        $for let i = 0; i < methodCount; i++ {
            fn helper${i}() {
                println("Helper method ${i} for ${structParam.Name}")
            }
        }
        
        // –û–±—ã—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ runtime —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        fn print${structParam.Name}Info(obj) {
            println("=== ${structParam.Name} Info ===")
            
            // –≠—Ç–æ runtime –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ
            for let i = 0; i < 3; i++ {
                println("Runtime line " + i.toString())
            }
            
            if obj.name.length() > 0 {
                println("Name: " + obj.name)
            }
        }
    }
}
*/

// –ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥:
macro generateSimple(structParam: StructType) {
    println("=== Macro-time: Processing " + structParam.Name + " ===")
    
    generate {
        fn create${structParam.Name}(name) {
            return ${structParam.Name}{name: name}
        }
        
        fn print${structParam.Name}(obj) {
            println("Created ${structParam.Name}: " + obj.name)
        }
    }
}

println("=== New Approach Demo ===")
println("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å $ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏")

@generateSimple(User)
@generateSimple(Product)

let user = createUser("Alice")
printUser(user)

let product = createProduct("Laptop")
printProduct(product)

println("")
println("üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –ò–î–ï–Ø:")
println("$ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º = compile-time (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –º–∞–∫—Ä–æ—Å–∞)")
println("–ë–µ–∑ $ = runtime (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ)")
println("")
println("–ü—Ä–∏–º–µ—Ä—ã:")
println("for   = runtime —Ü–∏–∫–ª –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")  
println("$for  = compile-time —Ü–∏–∫–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("if    = runtime —É—Å–ª–æ–≤–∏–µ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
println("$if   = compile-time —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
println("let   = runtime –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
println("$let  = compile-time –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Ä–æ—Å–∞")