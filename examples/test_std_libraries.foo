// examples/test_std_libraries.foo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
// üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π std.fs, std.http, std.crypto, std.time

println("=== üöÄ –î–ï–ú–û: –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò FOO LANG ===")
println()

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
import * as fs from "std/fs.foo"
import * as http from "std/http.foo"
import * as crypto from "std/crypto.foo"
import * as time from "std/time.foo"

println("üì¶ –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
println()

// üóÇÔ∏è === –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê (std.fs) ===
println("1Ô∏è‚É£ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï std.fs ===")

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
let testDir = "test_std_demo"
println("üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: " + testDir)
let mkResult = fs.mkdir(testDir)
if mkResult.isOk() {
    println("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
} else {
    println("‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
let testFile = testDir + "/demo.txt"
let content = "–ü—Ä–∏–≤–µ—Ç –æ—Ç foo_lang! –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + time.formatISO(time.now())
println("üìÑ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª: " + testFile)
let writeResult = fs.writeFile(testFile, content)
if writeResult.isOk() {
    println("‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω")
} else {
    println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: " + writeResult.unwrap_err())
}

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
println("üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...")
let readResult = fs.readFile(testFile)
if readResult.isOk() {
    println("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: " + readResult.unwrap())
} else {
    println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: " + readResult.unwrap_err())
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
let fileInfo = fs.getFileInfo(testFile)
if fileInfo.isOk() {
    let info = fileInfo.unwrap()
    println("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " + info["size"].toString() + " –±–∞–π—Ç")
} else {
    println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
}

println()

// üîê === –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–Ø (std.crypto) ===
println("2Ô∏è‚É£ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï std.crypto ===")

let testData = "Hello, foo_lang!"
println("üîç –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: " + testData)

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
let md5Hash = crypto.md5(testData)
let sha256Hash = crypto.sha256(testData)
println("üîë MD5: " + md5Hash)
println("üîë SHA256: " + sha256Hash)

// Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
let encoded = crypto.base64Encode(testData)
let decoded = crypto.base64Decode(encoded)
println("üì¶ Base64 encoded: " + encoded)
println("üì¶ Base64 decoded: " + decoded)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let randomStr = crypto.randomString(16)
let uuid = crypto.randomUUID()
println("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: " + randomStr)
println("üÜî UUID: " + uuid)

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
let password = "mySecurePassword123"
let hashResult = crypto.hashPassword(password)
if hashResult.isOk() {
    let hashData = hashResult.unwrap()
    println("üîê –•–µ—à –ø–∞—Ä–æ–ª—è: " + hashData["hash"].substring(0, 20) + "...")
    println("üßÇ –°–æ–ª—å: " + hashData["salt"].substring(0, 10) + "...")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    let verifyResult = crypto.verifyPassword(password, hashData["hash"], hashData["salt"])
    println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: " + (verifyResult ? "SUCCESS" : "FAILED"))
}

// –ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
let strengthCheck = crypto.checkPasswordStrength(password)
println("üí™ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è: " + strengthCheck["strength"] + " (Score: " + strengthCheck["score"].toString() + ")")

println()

// ‚è∞ === –†–ê–ë–û–¢–ê –°–û –í–†–ï–ú–ï–ù–ï–ú (std.time) ===
println("3Ô∏è‚É£ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï std.time ===")

// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
let currentTime = time.now()
println("üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + time.format(currentTime))
println("üåç ISO —Ñ–æ—Ä–º–∞—Ç: " + time.formatISO(currentTime))
println("üìä Unix timestamp: " + time.toUnix(currentTime).toString())

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
println("üìÖ –ì–æ–¥: " + time.year(currentTime).toString())
println("üìÖ –ú–µ—Å—è—Ü: " + time.month(currentTime).toString())
println("üìÖ –î–µ–Ω—å: " + time.day(currentTime).toString())
println("üïê –ß–∞—Å: " + time.hour(currentTime).toString())
println("üïê –ú–∏–Ω—É—Ç–∞: " + time.minute(currentTime).toString())

// –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
let tomorrow = time.addDays(currentTime, 1)
let nextWeek = time.addDays(currentTime, 7)
println("üìÖ –ó–∞–≤—Ç—Ä–∞: " + time.format(tomorrow, time.FORMATS["DATE"]))
println("üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: " + time.format(nextWeek, time.FORMATS["DATE"]))

// –†–∞–∑–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
let diffDays = time.diffDays(nextWeek, currentTime)
let diffHours = time.diffHours(tomorrow, currentTime)
if diffDays.isOk() && diffHours.isOk() {
    println("üìè –î–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏: " + diffDays.unwrap().toString() + " –¥–Ω–µ–π")
    println("üìè –î–æ –∑–∞–≤—Ç—Ä–∞: " + diffHours.unwrap().toString() + " —á–∞—Å–æ–≤")
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—é–¥–µ–π
let pastTime = time.addHours(currentTime, -2)
println("üïê 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥: " + time.formatHuman(pastTime))

// –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
let durationResult = time.parseDuration("2d12h30m45s")
if durationResult.isOk() {
    let totalSeconds = durationResult.unwrap()
    println("‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å '2d12h30m45s': " + totalSeconds.toString() + " —Å–µ–∫—É–Ω–¥")
    
    let futureTime = time.addSeconds(currentTime, totalSeconds)
    println("üîÆ –í—Ä–µ–º—è —á–µ—Ä–µ–∑ —ç—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + time.format(futureTime))
}

// –ü—Ä–æ–≤–µ—Ä–∫–∏
println("üèñÔ∏è –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π: " + (time.isWeekend(currentTime) ? "–î–∞" : "–ù–µ—Ç"))
println("üè¢ –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: " + (time.isWorkday(currentTime) ? "–î–∞" : "–ù–µ—Ç"))

// –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
let currentYear = time.year(currentTime)
println("üìÖ " + currentYear.toString() + " –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥: " + (time.isLeapYear(currentYear) ? "–î–∞" : "–ù–µ—Ç"))

println()

// üåê === HTTP (std.http) - –ö–õ–ò–ï–ù–¢ (–¥–µ–º–æ) ===
println("4Ô∏è‚É£ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï std.http (–ö–õ–ò–ï–ù–¢) ===")

println("üåç HTTP –∫–ª–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:")
println("  - http.get(url)")
println("  - http.post(url, data)")
println("  - http.put(url, data)")
println("  - http.delete(url)")

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è URL —É—Ç–∏–ª–∏—Ç
let baseUrl = "https://api.example.com/users"
let params = {
    "page": 1,
    "limit": 10,
    "filter": "active"
}

let builtUrl = http.buildURL(baseUrl, params)
println("üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL: " + builtUrl)

let parsedUrl = http.parseURL(builtUrl)
if parsedUrl.isOk() {
    let urlParts = parsedUrl.unwrap()
    println("üîç –ü—Ä–æ—Ç–æ–∫–æ–ª: " + urlParts["protocol"])
    println("üîç –•–æ—Å—Ç: " + urlParts["host"])
    println("üîç –ü—É—Ç—å: " + urlParts["path"])
}

// Cookie —É—Ç–∏–ª–∏—Ç—ã
let cookieString = "sessionid=abc123; userid=42; theme=dark"
let cookies = http.parseCookies(cookieString)
println("üç™ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ cookies: " + JSON.stringify(cookies))

let newCookie = http.buildCookie("newcookie", "value123", {
    "maxAge": 3600,
    "secure": true,
    "httpOnly": true
})
println("üç™ –ù–æ–≤—ã–π cookie: " + newCookie)

println()

// üìä === –û–ë–©–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===
println("5Ô∏è‚É£ === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===")

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
let reportContent = "=== –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´ ===\n"
reportContent = reportContent + "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " + time.formatISO(time.now()) + "\n"
reportContent = reportContent + "UUID —Å–µ—Å—Å–∏–∏: " + crypto.randomUUID() + "\n"
reportContent = reportContent + "–•–µ—à —Å–∏—Å—Ç–µ–º—ã: " + crypto.sha256("foo_lang_system_" + time.toUnix(time.now()).toString()) + "\n"
reportContent = reportContent + "–°–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω: " + crypto.randomString(32) + "\n"

// –®–∏—Ñ—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
let encryptionKey = "mySecretKey123"
let encryptedResult = crypto.encryptText(reportContent, encryptionKey)

if encryptedResult.isOk() {
    let encryptedContent = encryptedResult.unwrap()
    let reportFile = testDir + "/encrypted_report.txt"
    
    println("üîê –°–æ–∑–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç...")
    let writeEncryptedResult = fs.writeFile(reportFile, encryptedContent)
    
    if writeEncryptedResult.isOk() {
        println("‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: " + reportFile)
        
        // –ß–∏—Ç–∞–µ–º –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        let readEncryptedResult = fs.readFile(reportFile)
        if readEncryptedResult.isOk() {
            let encryptedData = readEncryptedResult.unwrap()
            let decryptedResult = crypto.decryptText(encryptedData, encryptionKey)
            
            if decryptedResult.isOk() {
                println("üîì –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω:")
                println(decryptedResult.unwrap())
            }
        }
    }
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
let jwtPayload = {
    "user": "demo_user",
    "created": time.toUnix(time.now()),
    "expires": time.toUnix(time.addHours(time.now(), 24))
}

let jwtSecret = crypto.generateSecretKey(32)
let jwtResult = crypto.generateJWT(jwtPayload, jwtSecret, "HS256")

if jwtResult.isOk() {
    let token = jwtResult.unwrap()
    println("üé´ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: " + token.substring(0, 50) + "...")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let verifyResult = crypto.verifyJWT(token, jwtSecret, "HS256")
    if verifyResult.isOk() {
        println("‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!")
    }
}

println()

// üßπ –û—á–∏—Å—Ç–∫–∞
println("6Ô∏è‚É£ === –û–ß–ò–°–¢–ö–ê ===")
println("üßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã...")
let removeResult = fs.removeDir(testDir, true)
if removeResult.isOk() {
    println("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
} else {
    println("‚ÑπÔ∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
}

println()
println("=== üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
println("üöÄ –í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ foo_lang —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
println("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:")
println("  ‚Ä¢ std.fs - —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (40+ —Ñ—É–Ω–∫—Ü–∏–π)")
println("  ‚Ä¢ std.http - HTTP –∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä (50+ —Ñ—É–Ω–∫—Ü–∏–π)") 
println("  ‚Ä¢ std.crypto - –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (30+ —Ñ—É–Ω–∫—Ü–∏–π)")
println("  ‚Ä¢ std.time - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (60+ —Ñ—É–Ω–∫—Ü–∏–π)")
println()
println("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: import * as fs from \"std/fs.foo\"")
println("üí° –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")