// –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–∫—Ä–æ—Å–æ–≤
// FINAL DEMO: new syntax for typed macros

println("üéØ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô === üéØ")
println("")

// ========== –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ==========
struct User {
    name: string,
    age: int,
    email: string
}

struct Product {
    title: string,
    price: float
}

enum Status {
    ACTIVE,
    INACTIVE,
    PENDING
}

// ========== –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
println("1Ô∏è‚É£ –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:")

fn calculateTotal(price: float, tax: float) {
    return price * (1.0 + tax)
}

fn formatUser(name: string, age: int) {
    return name + " (" + age + " –ª–µ—Ç)"
}

println("‚Ä¢ calculateTotal(100.0, 0.2) = " + calculateTotal(100.0, 0.2))
println("‚Ä¢ formatUser = " + formatUser("–ê–Ω–Ω–∞", 28))
println("")

// ========== –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–ö–†–û–°–´ –° –ù–û–í–´–ú –°–ò–ù–¢–ê–ö–°–ò–°–û–ú ==========
println("2Ô∏è‚É£ –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–ö–†–û–°–´:")

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞–∫—Ä–æ—Å
macro universalGenerator(anyType: Type) {
    println("üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: " + anyType.Name + " (" + anyType.Kind + ")")
    
    if anyType.isStruct() {
        println("   ‚Üí –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CRUD –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        println("   fn create" + anyType.Name + "() { return {} }")
        println("   fn update" + anyType.Name + "(obj, data) { return obj }")
    } else if anyType.isPrimitive() {
        println("   ‚Üí –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–∞")
        println("   fn validate" + anyType.Name + "(val) { return val != null }")
    }
    println("")
}

// –ú–∞–∫—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä
macro structOnlyMacro(structType: StructType) {
    println("üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞: " + structType.Name)
    println("   fn serialize" + structType.Name + "(obj) { return JSON.stringify(obj) }")
    println("")
}

println("‚ú® –ù–û–í–´–ô –°–ò–ù–¢–ê–ö–°–ò–°: @macro(TypeName) –Ω–∞–ø—Ä—è–º—É—é!")
println("")

// ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û: —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø—Ä–∏–º–∏—Ç–∏–≤—ã
@universalGenerator(User)           // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä
@universalGenerator(Product)        // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä
@universalGenerator(int)            // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
@universalGenerator(string)         // –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤

@structOnlyMacro(User)              // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç
@structOnlyMacro(Product)

// üìù –î–õ–Ø ENUM: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (–ø–æ–∫–∞)
println("üìù –î–ª—è enum –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:")
let statusType = type(Status)
@universalGenerator(statusType)

println("========================================")
println("üéâ –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–û:")
println("‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (int, string, float, bool)")
println("‚úÖ –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–∞–∫—Ä–æ—Å–æ–≤ @macro(StructName)")
println("‚úÖ –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–∞–∫—Ä–æ—Å–æ–≤ @macro(PrimitiveType)")  
println("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã (StructType, EnumType)")
println("‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤")
println("‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º")
println("")
println("üöÄ FOO LANG V2 –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")