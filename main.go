package main

import (
	"fmt"
	"foo_lang/ast"
	"foo_lang/builtin"
	"foo_lang/modules"
	"foo_lang/parser"
	"os"
	"strings"
)

type User struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

func main() {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println(err)
		}
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ bytecode —Ä–µ–∂–∏–º–∞
	for _, arg := range os.Args {
		if arg == "--bytecode" || arg == "-b" {
			RunBytecodeMode()
			return
		}
		if arg == "--help" || arg == "-h" {
			printUsage()
			return
		}
	}

	var filename string = "examples/main.foo" // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

	if len(os.Args) > 1 {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞
		for _, arg := range os.Args[1:] {
			if !strings.HasPrefix(arg, "-") {
				filename = arg
				break
			}
		}
	}

	// Set up global parse function for module imports
	parseFunc := func(code string) []modules.Expr {
		// –î–ª—è –º–æ–¥—É–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç GlobalScope
		exprs := parser.NewParser(code).ParseWithoutScopeInit()
		result := make([]modules.Expr, len(exprs))
		for i, expr := range exprs {
			result[i] = expr
		}
		return result
	}
	ast.SetGlobalParseFunc(parseFunc)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º NewParserFromFile –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è API
	p, err := parser.NewParserFromFile(filename)
	if err != nil {
		fmt.Printf("Error creating parser: %v\n", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º scope –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	scopeStack := p.GetScopeStack()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —ç—Ç–∏–º scope
	builtin.InitializeMathFunctions(scopeStack)
	builtin.InitializeStringFunctions(scopeStack)
	builtin.InitializeFilesystemFunctions(scopeStack)
	builtin.InitializeHttpFunctions(scopeStack)
	builtin.InitializeChannelFunctions(scopeStack)
	builtin.InitializeTimeFunctions(scopeStack)
	builtin.InitializeCryptoFunctions(scopeStack)
	builtin.InitializeRegexFunctions(scopeStack)
	builtin.InitializeSyncFunctions(scopeStack)
	
	// –ù–æ–≤—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	builtin.InitializeStdioFunctions(scopeStack)
	builtin.InitializeProcessFunctions(scopeStack)
	builtin.InitializeCliFunctions(scopeStack)
	builtin.InitializeDebugFunctions(scopeStack)
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	builtin.InitCLI(os.Args)
	
	// üî• –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: Extension methods –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
	builtin.InitializeSystemExtensions(scopeStack)  // Extension methods –¥–ª—è System, IO, Console –∏ —Ç.–¥.
	builtin.InitializeGlobalObjects(scopeStack)     // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã IO, System, Console, Process –∏ —Ç.–¥.
	builtin.InitializeResultFunctions(scopeStack)   // Result —Ñ—É–Ω–∫—Ü–∏–∏ Ok/Err –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

	exprs := p.ParseWithModules()

	for _, expr := range exprs {
		expr.Eval()
	}
}

// RunBytecodeMode –∑–∞–ø—É—Å–∫–∞–µ—Ç bytecode —Ä–µ–∂–∏–º (–∑–∞–≥–ª—É—à–∫–∞)
func RunBytecodeMode() {
	fmt.Println("Bytecode —Ä–µ–∂–∏–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	fmt.Println("VM —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
}

// printUsage –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
func printUsage() {
	fmt.Println("foo_lang v2 - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("  go run main.go [—Ñ–∞–π–ª.foo] [—Ñ–ª–∞–≥–∏]")
	fmt.Println()
	fmt.Println("–§–ª–∞–≥–∏:")
	fmt.Println("  -b, --bytecode    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bytecode VM (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
	fmt.Println("  -d, --disassemble –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bytecode")
	fmt.Println("  -p, --profile     –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
	fmt.Println("  -c, --compare     –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å tree-walking vs bytecode")
	fmt.Println("  -h, --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println()
	fmt.Println("–ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Println("  go run main.go                                    # tree-walking –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä")
	fmt.Println("  go run main.go --bytecode                         # bytecode VM")
	fmt.Println("  go run main.go examples/test_bytecode_demo.foo -b # bytecode VM —Å —Ñ–∞–π–ª–æ–º")
	fmt.Println("  go run main.go --bytecode --profile --disassemble # –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
	fmt.Println("  go run main.go --bytecode --compare               # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
	fmt.Println()
	fmt.Println("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println("  ‚úÖ Generic —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏—è")
	fmt.Println("  ‚úÖ Interface —Å–∏—Å—Ç–µ–º–∞ –∏ Extension Methods")
	fmt.Println("  ‚úÖ Async/await –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å")
	fmt.Println("  ‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä")
	fmt.Println("  ‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
	fmt.Println("  ‚úÖ Bytecode –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
}
