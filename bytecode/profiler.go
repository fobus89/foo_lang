package bytecode

import (
	"fmt"
	"time"
	"sort"
)

// Profiler —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è bytecode
type Profiler struct {
	enabled           bool
	startTime         time.Time
	totalTime         time.Duration
	instructionCounts map[OpCode]int64
	instructionTimes  map[OpCode]time.Duration
	functionTimes     map[string]time.Duration
	functionCalls     map[string]int64
	functionStack     []FunctionFrame
	hotspots          []Hotspot
}

// FunctionFrame –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–¥—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–µ
type FunctionFrame struct {
	name      string
	startTime time.Time
}

// Hotspot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä—è—á—É—é —Ç–æ—á–∫—É –≤ –∫–æ–¥–µ
type Hotspot struct {
	Name       string
	CallCount  int64
	TotalTime  time.Duration
	AvgTime    time.Duration
	Percentage float64
}

// NewProfiler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
func NewProfiler() *Profiler {
	return &Profiler{
		enabled:           true,
		instructionCounts: make(map[OpCode]int64),
		instructionTimes:  make(map[OpCode]time.Duration),
		functionTimes:     make(map[string]time.Duration),
		functionCalls:     make(map[string]int64),
		functionStack:     make([]FunctionFrame, 0, 64),
		hotspots:          make([]Hotspot, 0, 100),
	}
}

// Enable –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
func (p *Profiler) Enable() {
	p.enabled = true
}

// Disable –≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
func (p *Profiler) Disable() {
	p.enabled = false
}

// StartExecution –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (p *Profiler) StartExecution() {
	if !p.enabled {
		return
	}
	p.startTime = time.Now()
}

// EndExecution –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (p *Profiler) EndExecution() {
	if !p.enabled {
		return
	}
	p.totalTime = time.Since(p.startTime)
	p.calculateHotspots()
}

// RecordInstruction –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
func (p *Profiler) RecordInstruction(opcode OpCode) {
	if !p.enabled {
		return
	}
	
	start := time.Now()
	p.instructionCounts[opcode]++
	
	// –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	elapsed := time.Since(start)
	p.instructionTimes[opcode] += elapsed
}

// StartFunction –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
func (p *Profiler) StartFunction(name string) {
	if !p.enabled {
		return
	}
	
	frame := FunctionFrame{
		name:      name,
		startTime: time.Now(),
	}
	p.functionStack = append(p.functionStack, frame)
	p.functionCalls[name]++
}

// EndFunction –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
func (p *Profiler) EndFunction(name string) {
	if !p.enabled || len(p.functionStack) == 0 {
		return
	}
	
	// –ò—â–µ–º –∫–∞–¥—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—Ç–µ–∫–µ
	for i := len(p.functionStack) - 1; i >= 0; i-- {
		if p.functionStack[i].name == name {
			elapsed := time.Since(p.functionStack[i].startTime)
			p.functionTimes[name] += elapsed
			
			// –£–¥–∞–ª—è–µ–º –∫–∞–¥—Ä –∏–∑ —Å—Ç–µ–∫–∞
			p.functionStack = append(p.functionStack[:i], p.functionStack[i+1:]...)
			break
		}
	}
}

// calculateHotspots –≤—ã—á–∏—Å–ª—è–µ—Ç –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏
func (p *Profiler) calculateHotspots() {
	p.hotspots = p.hotspots[:0] // –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	
	for name, totalTime := range p.functionTimes {
		callCount := p.functionCalls[name]
		avgTime := time.Duration(0)
		if callCount > 0 {
			avgTime = time.Duration(int64(totalTime) / callCount)
		}
		
		percentage := float64(totalTime) / float64(p.totalTime) * 100
		
		hotspot := Hotspot{
			Name:       name,
			CallCount:  callCount,
			TotalTime:  totalTime,
			AvgTime:    avgTime,
			Percentage: percentage,
		}
		
		p.hotspots = append(p.hotspots, hotspot)
	}
	
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏—é)
	sort.Slice(p.hotspots, func(i, j int) bool {
		return p.hotspots[i].TotalTime > p.hotspots[j].TotalTime
	})
}

// PrintReport –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
func (p *Profiler) PrintReport() {
	fmt.Println("=== –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
	fmt.Printf("–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", p.totalTime)
	fmt.Println()
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
	fmt.Println("--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---")
	
	type instructionStat struct {
		opcode OpCode
		count  int64
		time   time.Duration
	}
	
	var stats []instructionStat
	for opcode, count := range p.instructionCounts {
		stats = append(stats, instructionStat{
			opcode: opcode,
			count:  count,
			time:   p.instructionTimes[opcode],
		})
	}
	
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].count > stats[j].count
	})
	
	fmt.Printf("%-20s %10s %15s\n", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í—Ä–µ–º—è")
	fmt.Println("------------------------------------------------")
	for _, stat := range stats {
		opcodeStr := p.getOpCodeString(stat.opcode)
		fmt.Printf("%-20s %10d %15v\n", opcodeStr, stat.count, stat.time)
	}
	fmt.Println()
	
	// –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
	fmt.Println("--- –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π ---")
	fmt.Printf("%-20s %10s %15s %15s %10s\n", "–§—É–Ω–∫—Ü–∏—è", "–í—ã–∑–æ–≤—ã", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "–ü—Ä–æ—Ü–µ–Ω—Ç")
	fmt.Println("-----------------------------------------------------------------------")
	
	for _, hotspot := range p.hotspots {
		if hotspot.Percentage >= 1.0 { // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–Ω–∏–º–∞—é—â–∏–µ >1% –≤—Ä–µ–º–µ–Ω–∏
			fmt.Printf("%-20s %10d %15v %15v %9.2f%%\n",
				hotspot.Name,
				hotspot.CallCount,
				hotspot.TotalTime,
				hotspot.AvgTime,
				hotspot.Percentage)
		}
	}
	fmt.Println()
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	fmt.Println("--- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---")
	if len(p.hotspots) > 0 {
		topHotspot := p.hotspots[0]
		if topHotspot.Percentage > 50 {
			fmt.Printf("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è '%s' –∑–∞–Ω–∏–º–∞–µ—Ç %.1f%% –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n", 
				topHotspot.Name, topHotspot.Percentage)
		}
		
		if topHotspot.CallCount > 1000 {
			fmt.Printf("üî• –§—É–Ω–∫—Ü–∏—è '%s' –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è %d —Ä–∞–∑ - –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è JIT –∫–æ–º–ø–∏–ª—è—Ü–∏–∏\n", 
				topHotspot.Name, topHotspot.CallCount)
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	for _, stat := range stats[:3] { // —Ç–æ–ø-3 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
		if stat.count > 100 {
			opcodeStr := p.getOpCodeString(stat.opcode)
			fmt.Printf("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è %s –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è %d —Ä–∞–∑ - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n", 
				opcodeStr, stat.count)
		}
	}
	
	fmt.Println("=====================================")
}

// getOpCodeString –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∫–æ–¥–∞
func (p *Profiler) getOpCodeString(opcode OpCode) string {
	switch opcode {
	case OP_CONSTANT:
		return "OP_CONSTANT"
	case OP_ADD:
		return "OP_ADD"
	case OP_SUBTRACT:
		return "OP_SUBTRACT"
	case OP_MULTIPLY:
		return "OP_MULTIPLY"
	case OP_DIVIDE:
		return "OP_DIVIDE"
	case OP_GET_GLOBAL:
		return "OP_GET_GLOBAL"
	case OP_SET_GLOBAL:
		return "OP_SET_GLOBAL"
	case OP_CALL:
		return "OP_CALL"
	case OP_PRINT:
		return "OP_PRINT"
	default:
		return fmt.Sprintf("OP_%d", int(opcode))
	}
}

// GetHotspots –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫
func (p *Profiler) GetHotspots() []Hotspot {
	return p.hotspots
}

// GetTotalTime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (p *Profiler) GetTotalTime() time.Duration {
	return p.totalTime
}

// GetInstructionCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
func (p *Profiler) GetInstructionCount(opcode OpCode) int64 {
	return p.instructionCounts[opcode]
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
func (p *Profiler) Reset() {
	p.startTime = time.Time{}
	p.totalTime = 0
	
	for k := range p.instructionCounts {
		delete(p.instructionCounts, k)
	}
	for k := range p.instructionTimes {
		delete(p.instructionTimes, k)
	}
	for k := range p.functionTimes {
		delete(p.functionTimes, k)
	}
	for k := range p.functionCalls {
		delete(p.functionCalls, k)
	}
	
	p.functionStack = p.functionStack[:0]
	p.hotspots = p.hotspots[:0]
}