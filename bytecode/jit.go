package bytecode

import (
	"fmt"
	"foo_lang/value"
	"time"
)

// JITCompiler –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Just-In-Time –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
type JITCompiler struct {
	enabled         bool
	hotspotThreshold int64              // –ü–æ—Ä–æ–≥ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–≥–æ—Ä—è—á–µ–π"
	compiledFunctions map[string]*CompiledFunction
	executionStats   map[string]*ExecutionStats
}

// CompiledFunction –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç JIT-—Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
type CompiledFunction struct {
	name            string
	originalBytecode []Instruction
	optimizedCode   []OptimizedInstruction
	compiledAt      time.Time
	executionCount  int64
	totalTime       time.Duration
}

// OptimizedInstruction –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
type OptimizedInstruction struct {
	Type     OptimizationType
	OpCode   OpCode
	Operands []int
	// –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
	DirectValue    *value.Value // –î–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	OptimizedFunc  func(*VM) *value.Value // –î–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

// OptimizationType —Ç–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
type OptimizationType int

const (
	OPT_NONE OptimizationType = iota
	OPT_CONSTANT_FOLDING    // –°–≤–µ—Ä—Ç–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
	OPT_DIRECT_CALL        // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
	OPT_INLINE_MATH        // –ò–Ω–ª–∞–π–Ω –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	OPT_LOOP_UNROLL        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤
)

// ExecutionStats —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è JIT
type ExecutionStats struct {
	CallCount      int64
	TotalTime      time.Duration
	AverageTime    time.Duration
	IsHot          bool
	LastCompiled   time.Time
}

// NewJITCompiler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
func NewJITCompiler() *JITCompiler {
	return &JITCompiler{
		enabled:           true,
		hotspotThreshold:  100, // –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ—Ä—è—á–µ–π –ø–æ—Å–ª–µ 100 –≤—ã–∑–æ–≤–æ–≤
		compiledFunctions: make(map[string]*CompiledFunction),
		executionStats:    make(map[string]*ExecutionStats),
	}
}

// Enable –≤–∫–ª—é—á–∞–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—é
func (jit *JITCompiler) Enable() {
	jit.enabled = true
}

// Disable –≤—ã–∫–ª—é—á–∞–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—é
func (jit *JITCompiler) Disable() {
	jit.enabled = false
}

// SetHotspotThreshold —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
func (jit *JITCompiler) SetHotspotThreshold(threshold int64) {
	jit.hotspotThreshold = threshold
}

// RecordExecution –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
func (jit *JITCompiler) RecordExecution(funcName string, executionTime time.Duration) {
	if !jit.enabled {
		return
	}

	stats, exists := jit.executionStats[funcName]
	if !exists {
		stats = &ExecutionStats{}
		jit.executionStats[funcName] = stats
	}

	stats.CallCount++
	stats.TotalTime += executionTime
	stats.AverageTime = time.Duration(int64(stats.TotalTime) / stats.CallCount)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≥–æ—Ä—è—á–µ–π
	if !stats.IsHot && stats.CallCount >= jit.hotspotThreshold {
		stats.IsHot = true
		fmt.Printf("üî• JIT: Function '%s' became hot (%d calls, avg %v)\n", 
			funcName, stats.CallCount, stats.AverageTime)
		
		// –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
		jit.compileFunction(funcName)
	}
}

// compileFunction –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
func (jit *JITCompiler) compileFunction(funcName string) {
	if !jit.enabled {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ
	if _, exists := jit.compiledFunctions[funcName]; exists {
		return
	}

	fmt.Printf("üöÄ JIT: Compiling function '%s'...\n", funcName)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ bytecode –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
	compiled := &CompiledFunction{
		name:        funcName,
		compiledAt:  time.Now(),
		optimizedCode: jit.optimizeBytecode(funcName, nil), // nil - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è bytecode
	}

	jit.compiledFunctions[funcName] = compiled
	fmt.Printf("‚úÖ JIT: Function '%s' compiled successfully\n", funcName)
}

// optimizeBytecode –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç bytecode
func (jit *JITCompiler) optimizeBytecode(funcName string, originalBytecode []Instruction) []OptimizedInstruction {
	var optimized []OptimizedInstruction

	// –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ bytecode
	_ = funcName // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π —Ñ—É–Ω–∫—Ü–∏–π
	_ = originalBytecode // –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
	
	// 1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Å–≤–µ—Ä—Ç–∫–∞ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	optimized = append(optimized, OptimizedInstruction{
		Type:   OPT_CONSTANT_FOLDING,
		OpCode: OP_ADD,
		OptimizedFunc: func(vm *VM) *value.Value {
			// –ë—ã—Å—Ç—Ä–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–∏–ø–æ–≤
			b := vm.Pop()
			a := vm.Pop()
			if a.IsNumber() && b.IsNumber() {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Any()
				aVal := a.Any()
				bVal := b.Any()
				var sum float64
				
				switch aVal.(type) {
				case int64:
					sum += float64(aVal.(int64))
				case float64:
					sum += aVal.(float64)
				}
				
				switch bVal.(type) {
				case int64:
					sum += float64(bVal.(int64))
				case float64:
					sum += bVal.(float64)
				}
				
				result := value.NewValue(sum)
				vm.Push(result)
				return nil
			}
			// Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
			return value.Add(a, b)
		},
	})

	// 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–∑–æ–≤–æ–≤ print
	optimized = append(optimized, OptimizedInstruction{
		Type:   OPT_DIRECT_CALL,
		OpCode: OP_PRINT,
		OptimizedFunc: func(vm *VM) *value.Value {
			val := vm.Pop()
			fmt.Print(val.String()) // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
			vm.Push(value.NewNil())
			return nil
		},
	})

	// 3. –ò–Ω–ª–∞–π–Ω –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
	optimized = append(optimized, OptimizedInstruction{
		Type:   OPT_INLINE_MATH,
		OpCode: OP_MATH_ABS,
		OptimizedFunc: func(vm *VM) *value.Value {
			val := vm.Pop()
			if val.IsNumber() {
				valAny := val.Any()
				var num float64
				
				switch valAny.(type) {
				case int64:
					num = float64(valAny.(int64))
				case float64:
					num = valAny.(float64)
				}
				
				if num < 0 {
					num = -num
				}
				vm.Push(value.NewValue(num))
				return nil
			}
			return value.NewString("Error: abs() requires number")
		},
	})

	return optimized
}

// ExecuteOptimized –≤—ã–ø–æ–ª–Ω—è–µ—Ç JIT-—Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
func (jit *JITCompiler) ExecuteOptimized(vm *VM, funcName string) *value.Value {
	if !jit.enabled {
		return nil
	}

	compiled, exists := jit.compiledFunctions[funcName]
	if !exists {
		return nil // –§—É–Ω–∫—Ü–∏—è –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞
	}

	start := time.Now()
	
	fmt.Printf("‚ö° JIT: Executing optimized '%s'\n", funcName)
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	for _, instruction := range compiled.optimizedCode {
		if instruction.OptimizedFunc != nil {
			result := instruction.OptimizedFunc(vm)
			if result != nil && result.IsReturn() {
				compiled.executionCount++
				compiled.totalTime += time.Since(start)
				return result
			}
		}
	}

	compiled.executionCount++
	compiled.totalTime += time.Since(start)
	
	return value.NewNil()
}

// IsCompiled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
func (jit *JITCompiler) IsCompiled(funcName string) bool {
	_, exists := jit.compiledFunctions[funcName]
	return exists
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
func (jit *JITCompiler) GetStats() map[string]*ExecutionStats {
	return jit.executionStats
}

// PrintReport –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
func (jit *JITCompiler) PrintReport() {
	fmt.Println("=== JIT –ö–û–ú–ü–ò–õ–Ø–¢–û–† –û–¢–ß–ï–¢ ===")
	fmt.Printf("–°—Ç–∞—Ç—É—Å: %s\n", map[bool]string{true: "–í–∫–ª—é—á–µ–Ω", false: "–í—ã–∫–ª—é—á–µ–Ω"}[jit.enabled])
	fmt.Printf("–ü–æ—Ä–æ–≥ –≥–æ—Ä—è—á–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: %d –≤—ã–∑–æ–≤–æ–≤\n", jit.hotspotThreshold)
	fmt.Printf("–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: %d\n", len(jit.compiledFunctions))
	fmt.Println()

	if len(jit.compiledFunctions) > 0 {
		fmt.Println("--- –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---")
		fmt.Printf("%-20s %15s %15s %15s\n", "–§—É–Ω–∫—Ü–∏—è", "–í—ã–∑–æ–≤—ã JIT", "–í—Ä–µ–º—è JIT", "–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞")
		fmt.Println("---------------------------------------------------------------")
		
		for name, compiled := range jit.compiledFunctions {
			fmt.Printf("%-20s %15d %15v %15v\n", 
				name, 
				compiled.executionCount,
				compiled.totalTime,
				compiled.compiledAt.Format("15:04:05"))
		}
		fmt.Println()
	}

	if len(jit.executionStats) > 0 {
		fmt.Println("--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π ---")
		fmt.Printf("%-20s %10s %15s %15s %10s\n", "–§—É–Ω–∫—Ü–∏—è", "–í—ã–∑–æ–≤—ã", "–û–±—â–µ–µ –≤—Ä–µ–º—è", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å")
		fmt.Println("-----------------------------------------------------------------------")
		
		for name, stats := range jit.executionStats {
			status := "–•–æ–ª–æ–¥–Ω–∞—è"
			if stats.IsHot {
				status = "üî• –ì–æ—Ä—è—á–∞—è"
			}
			
			fmt.Printf("%-20s %10d %15v %15v %10s\n",
				name,
				stats.CallCount,
				stats.TotalTime,
				stats.AverageTime,
				status)
		}
		fmt.Println()
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	fmt.Println("--- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ JIT ---")
	hotCount := 0
	for _, stats := range jit.executionStats {
		if stats.IsHot {
			hotCount++
		}
	}
	
	if hotCount == 0 {
		fmt.Println("üí° –ì–æ—Ä—è—á–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É.")
	} else {
		fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –≥–æ—Ä—è—á–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. JIT –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n", hotCount)
	}
	
	if len(jit.compiledFunctions) > 0 {
		fmt.Printf("üöÄ JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —É–ª—É—á—à–∏—Ç—å—Å—è!\n")
	}
	
	fmt.Println("=============================")
}

// CompileFunction —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
func (jit *JITCompiler) CompileFunction(funcName string) {
	jit.compileFunction(funcName)
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
func (jit *JITCompiler) Reset() {
	for k := range jit.compiledFunctions {
		delete(jit.compiledFunctions, k)
	}
	for k := range jit.executionStats {
		delete(jit.executionStats, k)
	}
}