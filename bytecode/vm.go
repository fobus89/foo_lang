package bytecode

import (
	"fmt"
	"foo_lang/scope"
	"foo_lang/value"
)

// VM –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è bytecode
type VM struct {
	chunk       *Chunk
	ip          int                 // instruction pointer
	stack       []*value.Value      // —Å—Ç–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
	sp          int                 // stack pointer
	globals     map[string]*value.Value
	scope       *scope.ScopeStack
	callFrames  []CallFrame         // —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
	profiler    *Profiler           // –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	breakpoints map[int]bool        // —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞ –¥–ª—è debugger'–∞
	debugMode   bool               // —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
	jit         *JITCompiler       // JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
}

// CallFrame –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–¥—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
type CallFrame struct {
	function *value.Value
	ip       int
	basePtr  int // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å—Ç–µ–∫–µ
}

// NewVM —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É
func NewVM(chunk *Chunk, scopeStack *scope.ScopeStack) *VM {
	return &VM{
		chunk:       chunk,
		ip:          0,
		stack:       make([]*value.Value, 0, 256),
		sp:          0,
		globals:     make(map[string]*value.Value),
		scope:       scopeStack,
		callFrames:  make([]CallFrame, 0, 64),
		profiler:    NewProfiler(),
		breakpoints: make(map[int]bool),
		debugMode:   false,
		jit:         NewJITCompiler(),
	}
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ VM –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (vm *VM) Reset() {
	vm.ip = 0
	vm.stack = vm.stack[:0]
	vm.sp = 0
	vm.callFrames = vm.callFrames[:0]
}

// Push –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–∫
func (vm *VM) Push(val *value.Value) {
	vm.stack = append(vm.stack, val)
	vm.sp++
}

// Pop –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞
func (vm *VM) Pop() *value.Value {
	if vm.sp == 0 {
		return value.NewString("Error: stack underflow")
	}
	vm.sp--
	val := vm.stack[vm.sp]
	vm.stack = vm.stack[:vm.sp]
	return val
}

// Peek –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Ö–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–µ–∫–∞ –±–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
func (vm *VM) Peek(distance int) *value.Value {
	index := vm.sp - 1 - distance
	if index < 0 || index >= vm.sp {
		return value.NewString("Error: stack index out of bounds")
	}
	return vm.stack[index]
}

// Run –≤—ã–ø–æ–ª–Ω—è–µ—Ç bytecode
func (vm *VM) Run() *value.Value {
	vm.profiler.StartExecution()
	defer vm.profiler.EndExecution()

	for vm.ip < len(vm.chunk.Code) {
		instruction := &vm.chunk.Code[vm.ip]

		// üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ breakpoint'–æ–≤ –¥–ª—è debugger'–∞
		if vm.debugMode && vm.isBreakpoint(instruction.Line) {
			fmt.Printf("\nüî¥ BREAKPOINT: Line %d, IP=%d\n", instruction.Line, vm.ip)
			vm.PrintStack()
			vm.printLocalVariables()
			
			// –í —Ä–µ–∞–ª—å–Ω–æ–º debugger'–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
			fmt.Printf("Press Enter to continue...")
			fmt.Scanln() // –ü—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
		}

		// –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
		vm.profiler.RecordInstruction(instruction.OpCode)

		result := vm.executeInstruction(instruction)
		if result != nil && result.IsReturn() {
			return result
		}

		vm.ip++
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞ –∏–ª–∏ nil
	if vm.sp > 0 {
		return vm.Pop()
	}
	return value.NewNil()
}

// executeInstruction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
func (vm *VM) executeInstruction(instruction *Instruction) *value.Value {
	switch instruction.OpCode {

	// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ª–∏—Ç–µ—Ä–∞–ª—ã
	case OP_CONSTANT:
		constantIndex := instruction.Operands[0]
		if constantIndex >= len(vm.chunk.Constants) {
			return value.NewString("Error: constant index out of bounds")
		}
		constant := vm.chunk.Constants[constantIndex]
		vm.Push(value.FromInterface(constant))

	case OP_NIL:
		vm.Push(value.NewNil())

	case OP_TRUE:
		vm.Push(value.NewBool(true))

	case OP_FALSE:
		vm.Push(value.NewBool(false))

	// –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	case OP_ADD:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Add(a, b)
		})

	case OP_SUBTRACT:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Subtract(a, b)
		})

	case OP_MULTIPLY:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Multiply(a, b)
		})

	case OP_DIVIDE:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Divide(a, b)
		})

	case OP_MODULO:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Modulo(a, b)
		})

	case OP_NEGATE:
		operand := vm.Pop()
		vm.Push(value.Negate(operand))

	// –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	case OP_NOT:
		operand := vm.Pop()
		vm.Push(value.Not(operand))

	case OP_AND:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.And(a, b)
		})

	case OP_OR:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Or(a, b)
		})

	// –û–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	case OP_EQUAL:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Equal(a, b)
		})

	case OP_NOT_EQUAL:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.NotEqual(a, b)
		})

	case OP_GREATER:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Greater(a, b)
		})

	case OP_GREATER_EQUAL:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.GreaterEqual(a, b)
		})

	case OP_LESS:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.Less(a, b)
		})

	case OP_LESS_EQUAL:
		return vm.binaryOperation(func(a, b *value.Value) *value.Value {
			return value.LessEqual(a, b)
		})

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	case OP_GET_GLOBAL:
		nameIndex := instruction.Operands[0]
		name := vm.chunk.Constants[nameIndex].(string)
		if val, exists := vm.globals[name]; exists {
			vm.Push(val)
		} else {
			// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ scope
			if scopeVal, exists := vm.scope.Get(name); exists {
				vm.Push(scopeVal)
			} else {
				return value.NewString(fmt.Sprintf("Error: undefined variable '%s'", name))
			}
		}

	case OP_SET_GLOBAL:
		nameIndex := instruction.Operands[0]
		name := vm.chunk.Constants[nameIndex].(string)
		val := vm.Peek(0) // –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞
		vm.globals[name] = val
		vm.scope.Set(name, val)

	case OP_DEFINE_GLOBAL:
		nameIndex := instruction.Operands[0]
		name := vm.chunk.Constants[nameIndex].(string)
		val := vm.Pop()
		vm.globals[name] = val
		vm.scope.Set(name, val)

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º
	case OP_JUMP:
		offset := instruction.Operands[0]
		vm.ip += offset - 1 // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ ip++ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ

	case OP_JUMP_IF_FALSE:
		offset := instruction.Operands[0]
		condition := vm.Pop()
		if !condition.IsTruthy() {
			vm.ip += offset - 1
		}

	case OP_LOOP:
		offset := instruction.Operands[0]
		vm.ip -= offset + 1

	// –°—Ç–µ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏
	case OP_POP:
		vm.Pop()

	case OP_DUP:
		val := vm.Peek(0)
		vm.Push(val)

	// –ú–∞—Å—Å–∏–≤—ã
	case OP_ARRAY:
		size := instruction.Operands[0]
		elements := make([]*value.Value, size)
		for i := size - 1; i >= 0; i-- {
			elements[i] = vm.Pop()
		}
		vm.Push(value.NewArray(elements))

	case OP_INDEX:
		index := vm.Pop()
		obj := vm.Pop()
		result := value.Index(obj, index)
		vm.Push(result)

	// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	case OP_PRINT:
		val := vm.Pop()
		fmt.Print(val.String())
		vm.Push(value.NewNil())

	case OP_PRINTLN:
		val := vm.Pop()
		fmt.Println(val.String())
		vm.Push(value.NewNil())

	// –ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥
	case OP_PROFILE_START:
		nameIndex := instruction.Operands[0]
		name := vm.chunk.Constants[nameIndex].(string)
		vm.profiler.StartFunction(name)

	case OP_PROFILE_END:
		nameIndex := instruction.Operands[0]
		name := vm.chunk.Constants[nameIndex].(string)
		vm.profiler.EndFunction(name)

	// –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	case OP_GET_LOCAL:
		slotIndex := instruction.Operands[0]
		if vm.sp <= slotIndex {
			return value.NewString("Error: local variable index out of bounds")
		}
		localVal := vm.stack[slotIndex]
		vm.Push(localVal)

	case OP_SET_LOCAL:
		slotIndex := instruction.Operands[0]
		val := vm.Peek(0) // –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞
		if vm.sp <= slotIndex {
			return value.NewString("Error: local variable index out of bounds")
		}
		vm.stack[slotIndex] = val

	// –û–±—ä–µ–∫—Ç—ã
	case OP_OBJECT:
		size := instruction.Operands[0]
		obj := make(map[string]*value.Value)
		
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞
		for i := 0; i < size; i++ {
			val := vm.Pop()
			key := vm.Pop()
			obj[key.String()] = val
		}
		vm.Push(value.NewValue(obj))

	case OP_SET_INDEX:
		val := vm.Pop()
		index := vm.Pop()  
		obj := vm.Pop()
		// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
		fmt.Printf("Setting index %s of %s to %s\n", index.String(), obj.String(), val.String())
		vm.Push(value.NewNil())

	// –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
	case OP_CALL:
		argCount := instruction.Operands[0]
		
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç–µ–∫–∞
		args := make([]*value.Value, argCount)
		for i := argCount - 1; i >= 0; i-- {
			args[i] = vm.Pop()
		}
		
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
		function := vm.Pop()
		
		// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
		result := vm.callFunction(function, args)
		vm.Push(result)

	case OP_RETURN:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
		result := vm.Pop()
		result.SetReturn(true)
		return result

	// –ó–∞–º—ã–∫–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
	case OP_CLOSURE:
		functionIndex := instruction.Operands[0]
		function := vm.chunk.Constants[functionIndex]
		vm.Push(value.FromInterface(function))

	case OP_CALL_FUNCTION:
		argCount := instruction.Operands[0]
		// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ OP_CALL, –Ω–æ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
		args := make([]*value.Value, argCount)
		for i := argCount - 1; i >= 0; i-- {
			args[i] = vm.Pop()
		}
		function := vm.Pop()
		result := vm.callFunction(function, args)
		vm.Push(result)

	// Async/await (–∑–∞–≥–ª—É—à–∫–∏)
	case OP_ASYNC:
		_ = vm.Pop() // val –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
		// –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–∑–∞–≥–ª—É—à–∫–∞)
		vm.Push(value.NewValue("async_task"))

	case OP_AWAIT:
		_ = vm.Pop() // promise –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
		// –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
		result := value.NewValue("awaited_result")
		vm.Push(result)

	case OP_SLEEP:
		duration := vm.Pop()
		// –°–ø–∏–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (–∑–∞–≥–ª—É—à–∫–∞)
		fmt.Printf("Sleep for %s ms\n", duration.String())
		vm.Push(value.NewNil())

	// HTTP –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
	case OP_HTTP_GET:
		url := vm.Pop()
		fmt.Printf("HTTP GET: %s\n", url.String())
		result := value.NewValue(map[string]*value.Value{
			"status": value.NewValue(200),
			"body":   value.NewValue("response body"),
		})
		vm.Push(result)

	// –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
	case OP_MATH_SIN:
		val := vm.Pop()
		if val.IsNumber() {
			import_math := 3.14159 // –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è math.Sin
			result := value.NewValue(import_math) 
			vm.Push(result)
		} else {
			vm.Push(value.NewString("Error: sin() requires number"))
		}

	case OP_MATH_COS:
		val := vm.Pop()
		if val.IsNumber() {
			result := value.NewValue(1.0) // –∑–∞–≥–ª—É—à–∫–∞
			vm.Push(result)
		} else {
			vm.Push(value.NewString("Error: cos() requires number"))
		}

	case OP_MATH_SQRT:
		val := vm.Pop()
		if val.IsNumber() {
			// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è sqrt
			valAny := val.Any()
			var num float64
			
			switch valAny.(type) {
			case int64:
				num = float64(valAny.(int64))
			case float64:
				num = valAny.(float64)
			}
			
			if num >= 0 {
				result := value.NewValue(num / 2) // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
				vm.Push(result)
			} else {
				vm.Push(value.NewString("Error: sqrt of negative number"))
			}
		} else {
			vm.Push(value.NewString("Error: sqrt() requires number"))
		}

	case OP_MATH_POW:
		exponent := vm.Pop()
		base := vm.Pop()
		if base.IsNumber() && exponent.IsNumber() {
			// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pow
			baseAny := base.Any()
			expAny := exponent.Any()
			var baseNum, expNum float64
			
			switch baseAny.(type) {
			case int64:
				baseNum = float64(baseAny.(int64))
			case float64:
				baseNum = baseAny.(float64)
			}
			
			switch expAny.(type) {
			case int64:
				expNum = float64(expAny.(int64))
			case float64:
				expNum = expAny.(float64)
			}
			
			result := value.NewValue(baseNum * expNum) // –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
			vm.Push(result)
		} else {
			vm.Push(value.NewString("Error: pow() requires numbers"))
		}

	case OP_MATH_ABS:
		val := vm.Pop()
		if val.IsNumber() {
			valAny := val.Any()
			var num float64
			
			switch valAny.(type) {
			case int64:
				num = float64(valAny.(int64))
			case float64:
				num = valAny.(float64)
			}
			
			if num < 0 {
				num = -num
			}
			result := value.NewValue(num)
			vm.Push(result)
		} else {
			vm.Push(value.NewString("Error: abs() requires number"))
		}

	// –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	case OP_STRING_LEN:
		str := vm.Pop()
		length := len(str.String())
		vm.Push(value.NewValue(int64(length)))

	case OP_STRING_CONCAT:
		b := vm.Pop()
		a := vm.Pop()
		result := value.NewValue(a.String() + b.String())
		vm.Push(result)

	case OP_STRING_CHAR_AT:
		index := vm.Pop()
		str := vm.Pop()
		s := str.String()
		i := int(index.Int())
		if i >= 0 && i < len(s) {
			char := string(s[i])
			vm.Push(value.NewValue(char))
		} else {
			vm.Push(value.NewString("Error: string index out of bounds"))
		}

	case OP_STRING_SUBSTRING:
		end := vm.Pop()
		start := vm.Pop()
		str := vm.Pop()
		s := str.String()
		startIdx := int(start.Int())
		endIdx := int(end.Int())
		if startIdx >= 0 && endIdx <= len(s) && startIdx <= endIdx {
			result := s[startIdx:endIdx]
			vm.Push(value.NewValue(result))
		} else {
			vm.Push(value.NewString("Error: invalid substring indices"))
		}

	// –ú–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ (–∑–∞–≥–ª—É—à–∫–∏)
	case OP_METHOD_CALL:
		methodIndex := instruction.Operands[0]
		methodName := vm.chunk.Constants[methodIndex].(string)
		obj := vm.Pop()
		fmt.Printf("Method call: %s.%s()\n", obj.String(), methodName)
		vm.Push(value.NewNil())

	case OP_PROPERTY_ACCESS:
		propIndex := instruction.Operands[0]
		propName := vm.chunk.Constants[propIndex].(string)
		obj := vm.Pop()
		fmt.Printf("Property access: %s.%s\n", obj.String(), propName)
		vm.Push(value.NewNil())

	// –¢–∏–ø—ã –∏ –º–µ—Ç–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
	case OP_TYPE_OF:
		_ = vm.Pop() // val –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–≥–ª—É—à–∫–µ
		typeName := "unknown" // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ TypeString –≤ value.Value
		vm.Push(value.NewValue(typeName))

	case OP_TYPE_CHECK:
		expectedType := vm.Pop().String()
		_ = vm.Pop() // val –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–≥–ª—É—à–∫–µ
		actualType := "unknown" // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ TypeString –≤ value.Value
		isMatch := actualType == expectedType
		vm.Push(value.NewValue(isMatch))

	// –û—Ç–ª–∞–¥–∫–∞
	case OP_DEBUG_TRACE:
		fmt.Printf("DEBUG: IP=%d, SP=%d, Stack: ", vm.ip, vm.sp)
		for i := 0; i < vm.sp; i++ {
			fmt.Printf("[%s] ", vm.stack[i].String())
		}
		fmt.Println()

	default:
		return value.NewString(fmt.Sprintf("Error: unknown opcode %d", instruction.OpCode))
	}

	return nil
}

// binaryOperation –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–Ω–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–≤—É–º—è –æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏ –∏–∑ —Å—Ç–µ–∫–∞
func (vm *VM) binaryOperation(op func(a, b *value.Value) *value.Value) *value.Value {
	b := vm.Pop()
	a := vm.Pop()
	result := op(a, b)
	vm.Push(result)
	return nil
}

// GetProfiler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä VM
func (vm *VM) GetProfiler() *Profiler {
	return vm.profiler
}

// PrintStack –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func (vm *VM) PrintStack() {
	fmt.Printf("Stack (SP=%d): ", vm.sp)
	for i := 0; i < vm.sp; i++ {
		fmt.Printf("[%s] ", vm.stack[i].String())
	}
	fmt.Println()
}

// callFunction –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
func (vm *VM) callFunction(function *value.Value, args []*value.Value) *value.Value {
	// –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ CallFrame,
	// —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
	
	functionName := function.String()
	
	// –ü—Ä–æ—Å—Ç—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	switch functionName {
	case "print":
		if len(args) > 0 {
			fmt.Print(args[0].String())
		}
		return value.NewNil()
		
	case "println":
		if len(args) > 0 {
			fmt.Println(args[0].String())
		}
		return value.NewNil()
		
	case "len":
		if len(args) > 0 {
			arg := args[0]
			if arg.IsString() {
				return value.NewValue(int64(len(arg.String())))
			} else {
				// –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º–∞—Å—Å–∏–≤—É
				if arr, ok := arg.Any().([]interface{}); ok {
					return value.NewValue(int64(len(arr)))
				}
			}
		}
		return value.NewValue(int64(0))
		
	case "type":
		if len(args) > 0 {
			return value.NewValue("unknown") // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ TypeString –≤ value.Value
		}
		return value.NewValue("unknown")
		
	default:
		// –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - –∑–∞–≥–ª—É—à–∫–∞
		fmt.Printf("Calling user function: %s with %d args\n", functionName, len(args))
		return value.NewValue("function_result")
	}
}

// SetBreakpoint —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∞ –¥–ª—è debugger'–∞
func (vm *VM) SetBreakpoint(line int) {
	if vm.breakpoints == nil {
		vm.breakpoints = make(map[int]bool)
	}
	vm.breakpoints[line] = true
}

// RemoveBreakpoint —É–¥–∞–ª—è–µ—Ç —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∞
func (vm *VM) RemoveBreakpoint(line int) {
	if vm.breakpoints != nil {
		delete(vm.breakpoints, line)
	}
}

// isBreakpoint –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ breakpoint –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
func (vm *VM) isBreakpoint(line int) bool {
	if vm.breakpoints == nil {
		return false
	}
	return vm.breakpoints[line]
}

// printLocalVariables –≤—ã–≤–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è debugger'–∞
func (vm *VM) printLocalVariables() {
	fmt.Printf("Local variables:\n")
	
	// –í—ã–≤–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	if len(vm.globals) > 0 {
		fmt.Printf("  Globals:\n")
		for name, val := range vm.globals {
			fmt.Printf("    %s = %s\n", name, val.String())
		}
	}
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å CallFrames, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
	if len(vm.callFrames) > 0 {
		frame := vm.callFrames[len(vm.callFrames)-1]
		fmt.Printf("  Current frame: %s (base=%d)\n", frame.function.String(), frame.basePtr)
	}
}

// EnableDebugMode –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
func (vm *VM) EnableDebugMode() {
	vm.debugMode = true
}

// DisableDebugMode –æ—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
func (vm *VM) DisableDebugMode() {
	vm.debugMode = false
}

// IsDebugMode –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
func (vm *VM) IsDebugMode() bool {
	return vm.debugMode
}

// GetJIT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
func (vm *VM) GetJIT() *JITCompiler {
	return vm.jit
}

// EnableJIT –≤–∫–ª—é—á–∞–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—é
func (vm *VM) EnableJIT() {
	vm.jit.Enable()
}

// DisableJIT –≤—ã–∫–ª—é—á–∞–µ—Ç JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—é
func (vm *VM) DisableJIT() {
	vm.jit.Disable()
}

// IsBreakpoint –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ breakpoint –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
func (vm *VM) IsBreakpoint(line int) bool {
	return vm.isBreakpoint(line)
}
